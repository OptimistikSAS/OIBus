{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Language": {
				"type": "string",
				"enum": [
					"fr",
					"en"
				],
				"example": "en",
				"description": "Type representing a supported language."
			},
			"Timezone": {
				"type": "string",
				"example": "Europe/Paris",
				"description": "Represents a timezone as an IANA timezone string."
			},
			"Instant": {
				"type": "string",
				"example": "2023-10-31T12:34:56.789Z",
				"description": "Represents an instant in time as an ISO 8601 string."
			},
			"UserDTO": {
				"description": "Data Transfer Object for a user.\nRepresents a user with their personal information, login credentials, preferences, and display name.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"login": {
						"type": "string",
						"description": "The login username of the user.",
						"example": "john.doe"
					},
					"firstName": {
						"type": "string",
						"nullable": true,
						"description": "The first name of the user.\nCan be `null` if not provided.",
						"example": "John"
					},
					"lastName": {
						"type": "string",
						"nullable": true,
						"description": "The last name of the user.\nCan be `null` if not provided.",
						"example": "Doe"
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "The email address of the user.\nCan be `null` if not provided.",
						"example": "john.doe@example.com"
					},
					"language": {
						"$ref": "#/components/schemas/Language",
						"description": "The preferred language of the user.",
						"example": "en"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone",
						"description": "The preferred timezone of the user.",
						"example": "Europe/Paris"
					},
					"friendlyName": {
						"type": "string",
						"description": "The friendly display name of the user.",
						"example": "John Doe"
					}
				},
				"required": [
					"id",
					"login",
					"firstName",
					"lastName",
					"email",
					"language",
					"timezone",
					"friendlyName"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "aBc12F",
					"createdAt": "2023-01-01T00:00:00Z",
					"updatedAt": "2023-01-01T00:00:00Z",
					"login": "john.doe",
					"firstName": "John",
					"lastName": "Doe",
					"email": "john.doe@example.com",
					"language": "en",
					"timezone": "Europe/Paris",
					"friendlyName": "John Doe"
				}
			},
			"Page_UserDTO_": {
				"description": "Represents a paginated response containing an array of elements.",
				"properties": {
					"content": {
						"items": {
							"$ref": "#/components/schemas/UserDTO"
						},
						"type": "array",
						"description": "The content of the page - an array of elements."
					},
					"totalElements": {
						"type": "number",
						"format": "double",
						"description": "The total number of elements across all pages.",
						"example": 2
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "The size of the page, i.e., the maximum number of elements per page.",
						"example": 10
					},
					"number": {
						"type": "number",
						"format": "double",
						"description": "The number of the current page, starting at 0.",
						"example": 0
					},
					"totalPages": {
						"type": "number",
						"format": "double",
						"description": "The total number of pages (which can be 0 if there are no elements).",
						"example": 1
					}
				},
				"required": [
					"content",
					"totalElements",
					"size",
					"number",
					"totalPages"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"content": [
						{
							"id": "item1"
						},
						{
							"id": "item2"
						}
					],
					"totalElements": 2,
					"size": 10,
					"number": 0,
					"totalPages": 1
				}
			},
			"UserCommandDTO": {
				"description": "Command Data Transfer Object for creating or updating a user.\nUsed as the request body for user creation/update endpoints.",
				"properties": {
					"login": {
						"type": "string",
						"description": "The login username of the user.",
						"example": "john.doe"
					},
					"firstName": {
						"type": "string",
						"nullable": true,
						"description": "The first name of the user.\nCan be `null` if not provided.",
						"example": "John"
					},
					"lastName": {
						"type": "string",
						"nullable": true,
						"description": "The last name of the user.\nCan be `null` if not provided.",
						"example": "Doe"
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "The email address of the user.\nCan be `null` if not provided.",
						"example": "john.doe@example.com"
					},
					"language": {
						"$ref": "#/components/schemas/Language",
						"description": "The preferred language of the user.",
						"example": "en"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone",
						"description": "The preferred timezone of the user.",
						"example": "Europe/Paris"
					}
				},
				"required": [
					"login",
					"firstName",
					"lastName",
					"email",
					"language",
					"timezone"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"login": "john.doe",
					"firstName": "John",
					"lastName": "Doe",
					"email": "john.doe@example.com",
					"language": "en",
					"timezone": "Europe/Paris"
				}
			},
			"UserWithPassword": {
				"properties": {
					"user": {
						"$ref": "#/components/schemas/UserCommandDTO"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"user",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChangePasswordCommand": {
				"description": "Command for changing a user's password.\nUsed as the request body for password change endpoints.",
				"properties": {
					"currentPassword": {
						"type": "string",
						"description": "The current password of the user.",
						"example": "oldPassword123"
					},
					"newPassword": {
						"type": "string",
						"description": "The new password for the user.",
						"example": "newSecurePassword456"
					}
				},
				"required": [
					"currentPassword",
					"newPassword"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"currentPassword": "oldPassword123",
					"newPassword": "newSecurePassword456"
				}
			},
			"OIBusObjectAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"object"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"attributes": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttribute"
						},
						"type": "array"
					},
					"enablingConditions": {
						"items": {
							"$ref": "#/components/schemas/OIBusEnablingCondition"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusObjectDisplayProperties"
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"attributes",
					"enablingConditions",
					"displayProperties"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusAttributeDisplayProperties": {
				"properties": {
					"row": {
						"type": "number",
						"format": "double"
					},
					"columns": {
						"type": "number",
						"format": "double"
					},
					"displayInViewMode": {
						"type": "boolean"
					}
				},
				"required": [
					"row",
					"columns",
					"displayInViewMode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusAttributeType": {
				"type": "string",
				"enum": [
					"string",
					"number",
					"boolean",
					"object",
					"instant",
					"string-select",
					"secret",
					"code",
					"scan-mode",
					"transformer-array",
					"certificate",
					"timezone",
					"array"
				]
			},
			"OIBusAttributeValidatorType": {
				"type": "string",
				"enum": [
					"REQUIRED",
					"MINIMUM",
					"MAXIMUM",
					"POSITIVE_INTEGER",
					"VALID_CRON",
					"PATTERN",
					"UNIQUE",
					"SINGLE_TRUE",
					"MQTT_TOPIC_OVERLAP"
				]
			},
			"OIBusAttributeValidator": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/OIBusAttributeValidatorType"
					},
					"arguments": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"type",
					"arguments"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusStringAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"string"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					},
					"defaultValue": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties",
					"defaultValue"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusCodeAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"code"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					},
					"contentType": {
						"type": "string",
						"enum": [
							"sql",
							"json"
						]
					},
					"defaultValue": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties",
					"contentType",
					"defaultValue"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusStringSelectAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"string-select"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					},
					"selectableValues": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"defaultValue": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties",
					"selectableValues",
					"defaultValue"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusSecretAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"secret"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusNumberAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"number"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					},
					"defaultValue": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"unit": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties",
					"defaultValue",
					"unit"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusBooleanAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"boolean"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					},
					"defaultValue": {
						"type": "boolean"
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties",
					"defaultValue"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusInstantAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"instant"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusScanModeAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"scan-mode"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					},
					"acceptableType": {
						"type": "string",
						"enum": [
							"POLL",
							"SUBSCRIPTION_AND_POLL",
							"SUBSCRIPTION"
						]
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties",
					"acceptableType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusCertificateAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"certificate"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusTimezoneAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"timezone"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"displayProperties": {
						"$ref": "#/components/schemas/OIBusAttributeDisplayProperties"
					},
					"defaultValue": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"displayProperties",
					"defaultValue"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusArrayAttribute": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"array"
						],
						"nullable": false
					},
					"key": {
						"type": "string"
					},
					"translationKey": {
						"type": "string"
					},
					"validators": {
						"items": {
							"$ref": "#/components/schemas/OIBusAttributeValidator"
						},
						"type": "array"
					},
					"paginate": {
						"type": "boolean"
					},
					"numberOfElementPerPage": {
						"type": "number",
						"format": "double"
					},
					"rootAttribute": {
						"$ref": "#/components/schemas/OIBusObjectAttribute"
					}
				},
				"required": [
					"type",
					"key",
					"translationKey",
					"validators",
					"paginate",
					"numberOfElementPerPage",
					"rootAttribute"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusAttribute": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/OIBusObjectAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusStringAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusCodeAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusStringSelectAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusSecretAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusNumberAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusBooleanAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusInstantAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusScanModeAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusCertificateAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusTimezoneAttribute"
					},
					{
						"$ref": "#/components/schemas/OIBusArrayAttribute"
					}
				]
			},
			"OIBusEnablingCondition": {
				"properties": {
					"targetPathFromRoot": {
						"type": "string"
					},
					"referralPathFromRoot": {
						"type": "string"
					},
					"values": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "number",
									"format": "double"
								},
								{
									"type": "boolean"
								}
							]
						},
						"type": "array"
					}
				},
				"required": [
					"targetPathFromRoot",
					"referralPathFromRoot",
					"values"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusObjectDisplayProperties": {
				"properties": {
					"visible": {
						"type": "boolean"
					},
					"wrapInBox": {
						"type": "boolean"
					}
				},
				"required": [
					"visible",
					"wrapInBox"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomTransformerDTO": {
				"description": "Data Transfer Object for a custom transformer.\nExtends the base transformer with custom-specific properties.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the transformer.",
						"example": "transformer123"
					},
					"type": {
						"type": "string",
						"enum": [
							"custom"
						],
						"nullable": false,
						"description": "The type of the transformer (always 'custom' for this interface)."
					},
					"inputType": {
						"type": "string",
						"description": "The input data type that the transformer accepts.",
						"example": "string"
					},
					"outputType": {
						"type": "string",
						"description": "The output data type that the transformer produces.",
						"example": "number"
					},
					"manifest": {
						"$ref": "#/components/schemas/OIBusObjectAttribute",
						"description": "The manifest describing the transformer's input/output structure and attributes."
					},
					"name": {
						"type": "string",
						"description": "The name of the custom transformer.",
						"example": "String to Number"
					},
					"description": {
						"type": "string",
						"description": "A description of what the custom transformer does.",
						"example": "Converts string input to numeric output"
					},
					"customCode": {
						"type": "string",
						"description": "The custom JavaScript code that implements the transformation logic.",
						"example": "function transform(input) { return parseFloat(input); }"
					}
				},
				"required": [
					"id",
					"type",
					"inputType",
					"outputType",
					"manifest",
					"name",
					"description",
					"customCode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StandardTransformerDTO": {
				"description": "Data Transfer Object for a standard transformer.\nExtends the base transformer with standard-specific properties.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the transformer.",
						"example": "transformer123"
					},
					"type": {
						"type": "string",
						"enum": [
							"standard"
						],
						"nullable": false,
						"description": "The type of the transformer (always 'standard' for this interface)."
					},
					"inputType": {
						"type": "string",
						"description": "The input data type that the transformer accepts.",
						"example": "string"
					},
					"outputType": {
						"type": "string",
						"description": "The output data type that the transformer produces.",
						"example": "number"
					},
					"manifest": {
						"$ref": "#/components/schemas/OIBusObjectAttribute",
						"description": "The manifest describing the transformer's input/output structure and attributes."
					},
					"functionName": {
						"type": "string",
						"description": "The name of the standard function that implements the transformation.",
						"example": "toUpperCase"
					}
				},
				"required": [
					"id",
					"type",
					"inputType",
					"outputType",
					"manifest",
					"functionName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TransformerDTO": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/CustomTransformerDTO"
					},
					{
						"$ref": "#/components/schemas/StandardTransformerDTO"
					}
				],
				"description": "Union type representing either a custom or standard transformer."
			},
			"Page_TransformerDTO_": {
				"description": "Represents a paginated response containing an array of elements.",
				"properties": {
					"content": {
						"items": {
							"$ref": "#/components/schemas/TransformerDTO"
						},
						"type": "array",
						"description": "The content of the page - an array of elements."
					},
					"totalElements": {
						"type": "number",
						"format": "double",
						"description": "The total number of elements across all pages.",
						"example": 2
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "The size of the page, i.e., the maximum number of elements per page.",
						"example": 10
					},
					"number": {
						"type": "number",
						"format": "double",
						"description": "The number of the current page, starting at 0.",
						"example": 0
					},
					"totalPages": {
						"type": "number",
						"format": "double",
						"description": "The total number of pages (which can be 0 if there are no elements).",
						"example": 1
					}
				},
				"required": [
					"content",
					"totalElements",
					"size",
					"number",
					"totalPages"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"content": [
						{
							"id": "item1"
						},
						{
							"id": "item2"
						}
					],
					"totalElements": 2,
					"size": 10,
					"number": 0,
					"totalPages": 1
				}
			},
			"OIBusDataType": {
				"type": "string",
				"enum": [
					"any",
					"time-values",
					"setpoint"
				],
				"description": "Type representing an OIBus data type."
			},
			"CustomTransformerCommandDTO": {
				"description": "Command Data Transfer Object for creating or updating a custom transformer.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"custom"
						],
						"nullable": false,
						"description": "The type of the transformer (always 'custom' for this interface)."
					},
					"inputType": {
						"type": "string",
						"description": "The input data type that the transformer accepts.",
						"example": "string"
					},
					"outputType": {
						"type": "string",
						"description": "The output data type that the transformer produces.",
						"example": "number"
					},
					"name": {
						"type": "string",
						"description": "The name of the custom transformer.",
						"example": "String to Number"
					},
					"description": {
						"type": "string",
						"description": "A description of what the custom transformer does.",
						"example": "Converts string input to numeric output"
					},
					"customCode": {
						"type": "string",
						"description": "The custom JavaScript code that implements the transformation logic.",
						"example": "function transform(input) { return parseFloat(input); }"
					},
					"customManifest": {
						"$ref": "#/components/schemas/OIBusObjectAttribute",
						"description": "The manifest describing the transformer's input/output structure and attributes."
					}
				},
				"required": [
					"type",
					"inputType",
					"outputType",
					"name",
					"description",
					"customCode",
					"customManifest"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusSouthType": {
				"type": "string",
				"enum": [
					"ads",
					"folder-scanner",
					"ftp",
					"modbus",
					"mqtt",
					"mssql",
					"mysql",
					"odbc",
					"oianalytics",
					"oledb",
					"opc",
					"opcua",
					"oracle",
					"osisoft-pi",
					"postgresql",
					"sftp",
					"sqlite"
				]
			},
			"OIBusSouthCategory": {
				"type": "string",
				"enum": [
					"file",
					"iot",
					"database",
					"api"
				]
			},
			"SouthType": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/OIBusSouthType"
					},
					"category": {
						"$ref": "#/components/schemas/OIBusSouthCategory"
					},
					"modes": {
						"properties": {
							"history": {
								"type": "boolean"
							},
							"lastFile": {
								"type": "boolean"
							},
							"lastPoint": {
								"type": "boolean"
							},
							"subscription": {
								"type": "boolean"
							}
						},
						"required": [
							"history",
							"lastFile",
							"lastPoint",
							"subscription"
						],
						"type": "object"
					}
				},
				"required": [
					"id",
					"category",
					"modes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthConnectorManifest": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/OIBusSouthType"
					},
					"category": {
						"$ref": "#/components/schemas/OIBusSouthCategory"
					},
					"modes": {
						"properties": {
							"history": {
								"type": "boolean"
							},
							"lastFile": {
								"type": "boolean"
							},
							"lastPoint": {
								"type": "boolean"
							},
							"subscription": {
								"type": "boolean"
							}
						},
						"required": [
							"history",
							"lastFile",
							"lastPoint",
							"subscription"
						],
						"type": "object"
					},
					"settings": {
						"$ref": "#/components/schemas/OIBusObjectAttribute"
					},
					"items": {
						"$ref": "#/components/schemas/OIBusArrayAttribute"
					}
				},
				"required": [
					"id",
					"category",
					"modes",
					"settings",
					"items"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthConnectorLightDTO": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/OIBusSouthType"
					},
					"description": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					}
				},
				"required": [
					"id",
					"name",
					"type",
					"description",
					"enabled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthADSSettingsEnumAsText": {
				"type": "string",
				"enum": [
					"text",
					"integer"
				]
			},
			"SouthADSSettingsBoolAsText": {
				"type": "string",
				"enum": [
					"text",
					"integer"
				]
			},
			"SouthADSSettingsStructureFiltering": {
				"properties": {
					"name": {
						"type": "string"
					},
					"fields": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"fields"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthADSSettings": {
				"properties": {
					"netId": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"routerAddress": {
						"type": "string",
						"nullable": true
					},
					"routerTcpPort": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"clientAmsNetId": {
						"type": "string",
						"nullable": true
					},
					"clientAdsPort": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"retryInterval": {
						"type": "number",
						"format": "double"
					},
					"plcName": {
						"type": "string",
						"nullable": true
					},
					"enumAsText": {
						"$ref": "#/components/schemas/SouthADSSettingsEnumAsText"
					},
					"boolAsText": {
						"$ref": "#/components/schemas/SouthADSSettingsBoolAsText"
					},
					"structureFiltering": {
						"items": {
							"$ref": "#/components/schemas/SouthADSSettingsStructureFiltering"
						},
						"type": "array",
						"nullable": true
					}
				},
				"required": [
					"netId",
					"port",
					"routerAddress",
					"routerTcpPort",
					"clientAmsNetId",
					"clientAdsPort",
					"retryInterval",
					"plcName",
					"enumAsText",
					"boolAsText",
					"structureFiltering"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthFolderScannerSettings": {
				"properties": {
					"inputFolder": {
						"type": "string"
					},
					"compression": {
						"type": "boolean"
					}
				},
				"required": [
					"inputFolder",
					"compression"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthFTPSettingsAuthentication": {
				"type": "string",
				"enum": [
					"none",
					"password"
				]
			},
			"SouthFTPSettings": {
				"properties": {
					"host": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"authentication": {
						"$ref": "#/components/schemas/SouthFTPSettingsAuthentication"
					},
					"username": {
						"type": "string",
						"nullable": true
					},
					"password": {
						"type": "string",
						"nullable": true
					},
					"compression": {
						"type": "boolean"
					}
				},
				"required": [
					"host",
					"port",
					"authentication",
					"compression"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthModbusSettingsAddressOffset": {
				"type": "string",
				"enum": [
					"modbus",
					"jbus"
				]
			},
			"SouthModbusSettingsEndianness": {
				"type": "string",
				"enum": [
					"big-endian",
					"little-endian"
				]
			},
			"SouthModbusSettings": {
				"properties": {
					"host": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"retryInterval": {
						"type": "number",
						"format": "double"
					},
					"slaveId": {
						"type": "number",
						"format": "double"
					},
					"addressOffset": {
						"$ref": "#/components/schemas/SouthModbusSettingsAddressOffset"
					},
					"endianness": {
						"$ref": "#/components/schemas/SouthModbusSettingsEndianness"
					},
					"swapBytesInWords": {
						"type": "boolean"
					},
					"swapWordsInDWords": {
						"type": "boolean"
					}
				},
				"required": [
					"host",
					"port",
					"retryInterval",
					"slaveId",
					"addressOffset",
					"endianness",
					"swapBytesInWords",
					"swapWordsInDWords"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMQTTSettingsQos": {
				"type": "string",
				"enum": [
					"0",
					"1",
					"2"
				]
			},
			"SouthMQTTSettingsAuthenticationType": {
				"type": "string",
				"enum": [
					"none",
					"basic",
					"cert"
				]
			},
			"SouthMQTTSettingsAuthentication": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthMQTTSettingsAuthenticationType"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string",
						"nullable": true
					},
					"certFilePath": {
						"type": "string"
					},
					"keyFilePath": {
						"type": "string"
					},
					"caFilePath": {
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMQTTSettings": {
				"properties": {
					"url": {
						"type": "string"
					},
					"qos": {
						"$ref": "#/components/schemas/SouthMQTTSettingsQos"
					},
					"persistent": {
						"type": "boolean"
					},
					"authentication": {
						"$ref": "#/components/schemas/SouthMQTTSettingsAuthentication"
					},
					"rejectUnauthorized": {
						"type": "boolean"
					},
					"reconnectPeriod": {
						"type": "number",
						"format": "double"
					},
					"connectTimeout": {
						"type": "number",
						"format": "double"
					},
					"maxNumberOfMessages": {
						"type": "number",
						"format": "double"
					},
					"flushMessageTimeout": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"url",
					"qos",
					"authentication",
					"rejectUnauthorized",
					"reconnectPeriod",
					"connectTimeout",
					"maxNumberOfMessages",
					"flushMessageTimeout"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMSSQLSettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMSSQLSettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthMSSQLSettingsThrottling"
					},
					"host": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"connectionTimeout": {
						"type": "number",
						"format": "double"
					},
					"database": {
						"type": "string"
					},
					"encryption": {
						"type": "boolean"
					},
					"trustServerCertificate": {
						"type": "boolean"
					},
					"username": {
						"type": "string",
						"nullable": true
					},
					"password": {
						"type": "string",
						"nullable": true
					},
					"domain": {
						"type": "string",
						"nullable": true
					},
					"requestTimeout": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"throttling",
					"host",
					"port",
					"connectionTimeout",
					"database",
					"encryption",
					"trustServerCertificate",
					"username",
					"password",
					"domain",
					"requestTimeout"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMySQLSettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMySQLSettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthMySQLSettingsThrottling"
					},
					"host": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"connectionTimeout": {
						"type": "number",
						"format": "double"
					},
					"database": {
						"type": "string"
					},
					"username": {
						"type": "string",
						"nullable": true
					},
					"password": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"throttling",
					"host",
					"port",
					"connectionTimeout",
					"database",
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthODBCSettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthODBCSettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthODBCSettingsThrottling"
					},
					"remoteAgent": {
						"type": "boolean"
					},
					"agentUrl": {
						"type": "string"
					},
					"connectionTimeout": {
						"type": "number",
						"format": "double"
					},
					"retryInterval": {
						"type": "number",
						"format": "double"
					},
					"requestTimeout": {
						"type": "number",
						"format": "double"
					},
					"connectionString": {
						"type": "string"
					},
					"password": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"throttling",
					"remoteAgent",
					"connectionTimeout",
					"retryInterval",
					"connectionString",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOIAnalyticsSettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOIAnalyticsSettingsSpecificSettingsAuthentication": {
				"type": "string",
				"enum": [
					"basic",
					"aad-client-secret",
					"aad-certificate"
				]
			},
			"SouthOIAnalyticsSettingsSpecificSettings": {
				"properties": {
					"host": {
						"type": "string"
					},
					"acceptUnauthorized": {
						"type": "boolean"
					},
					"authentication": {
						"$ref": "#/components/schemas/SouthOIAnalyticsSettingsSpecificSettingsAuthentication"
					},
					"accessKey": {
						"type": "string"
					},
					"secretKey": {
						"type": "string",
						"nullable": true
					},
					"tenantId": {
						"type": "string"
					},
					"clientId": {
						"type": "string"
					},
					"clientSecret": {
						"type": "string",
						"nullable": true
					},
					"certificateId": {
						"type": "string"
					},
					"scope": {
						"type": "string"
					},
					"useProxy": {
						"type": "boolean"
					},
					"proxyUrl": {
						"type": "string"
					},
					"proxyUsername": {
						"type": "string"
					},
					"proxyPassword": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"host",
					"acceptUnauthorized",
					"authentication",
					"useProxy"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOIAnalyticsSettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthOIAnalyticsSettingsThrottling"
					},
					"useOiaModule": {
						"type": "boolean"
					},
					"timeout": {
						"type": "number",
						"format": "double"
					},
					"specificSettings": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SouthOIAnalyticsSettingsSpecificSettings"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"throttling",
					"useOiaModule",
					"timeout"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOLEDBSettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOLEDBSettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthOLEDBSettingsThrottling"
					},
					"agentUrl": {
						"type": "string"
					},
					"connectionTimeout": {
						"type": "number",
						"format": "double"
					},
					"retryInterval": {
						"type": "number",
						"format": "double"
					},
					"requestTimeout": {
						"type": "number",
						"format": "double"
					},
					"connectionString": {
						"type": "string"
					}
				},
				"required": [
					"throttling",
					"agentUrl",
					"connectionTimeout",
					"retryInterval",
					"requestTimeout",
					"connectionString"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOPCSettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					},
					"maxInstantPerItem": {
						"type": "boolean"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap",
					"maxInstantPerItem"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOPCSettingsMode": {
				"type": "string",
				"enum": [
					"hda",
					"da"
				]
			},
			"SouthOPCSettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthOPCSettingsThrottling"
					},
					"agentUrl": {
						"type": "string"
					},
					"retryInterval": {
						"type": "number",
						"format": "double"
					},
					"host": {
						"type": "string"
					},
					"serverName": {
						"type": "string"
					},
					"mode": {
						"$ref": "#/components/schemas/SouthOPCSettingsMode"
					}
				},
				"required": [
					"throttling",
					"agentUrl",
					"retryInterval",
					"host",
					"serverName",
					"mode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOPCUASettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					},
					"maxInstantPerItem": {
						"type": "boolean"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap",
					"maxInstantPerItem"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOPCUASettingsSecurityMode": {
				"type": "string",
				"enum": [
					"none",
					"sign",
					"sign-and-encrypt"
				]
			},
			"SouthOPCUASettingsSecurityPolicy": {
				"type": "string",
				"enum": [
					"none",
					"basic128",
					"basic192",
					"basic192-rsa15",
					"basic256-rsa15",
					"basic256-sha256",
					"aes128-sha256-rsa-oaep",
					"pub-sub-aes-128-ctr",
					"pub-sub-aes-256-ctr"
				]
			},
			"SouthOPCUASettingsAuthenticationType": {
				"type": "string",
				"enum": [
					"none",
					"basic",
					"cert"
				]
			},
			"SouthOPCUASettingsAuthentication": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthOPCUASettingsAuthenticationType"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string",
						"nullable": true
					},
					"certFilePath": {
						"type": "string"
					},
					"keyFilePath": {
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOPCUASettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthOPCUASettingsThrottling"
					},
					"sharedConnection": {
						"type": "boolean"
					},
					"url": {
						"type": "string"
					},
					"keepSessionAlive": {
						"type": "boolean"
					},
					"readTimeout": {
						"type": "number",
						"format": "double"
					},
					"retryInterval": {
						"type": "number",
						"format": "double"
					},
					"securityMode": {
						"$ref": "#/components/schemas/SouthOPCUASettingsSecurityMode"
					},
					"securityPolicy": {
						"$ref": "#/components/schemas/SouthOPCUASettingsSecurityPolicy"
					},
					"authentication": {
						"$ref": "#/components/schemas/SouthOPCUASettingsAuthentication"
					}
				},
				"required": [
					"throttling",
					"sharedConnection",
					"url",
					"keepSessionAlive",
					"readTimeout",
					"retryInterval",
					"securityMode",
					"authentication"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOracleSettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOracleSettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthOracleSettingsThrottling"
					},
					"thickMode": {
						"type": "boolean"
					},
					"oracleClient": {
						"type": "string"
					},
					"host": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"connectionTimeout": {
						"type": "number",
						"format": "double"
					},
					"database": {
						"type": "string"
					},
					"username": {
						"type": "string",
						"nullable": true
					},
					"password": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"throttling",
					"thickMode",
					"host",
					"port",
					"connectionTimeout",
					"database",
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthPISettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					},
					"maxInstantPerItem": {
						"type": "boolean"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap",
					"maxInstantPerItem"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthPISettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthPISettingsThrottling"
					},
					"agentUrl": {
						"type": "string"
					},
					"retryInterval": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"throttling",
					"agentUrl",
					"retryInterval"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthPostgreSQLSettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthPostgreSQLSettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthPostgreSQLSettingsThrottling"
					},
					"host": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"sslMode": {
						"type": "boolean"
					},
					"database": {
						"type": "string"
					},
					"connectionTimeout": {
						"type": "number",
						"format": "double"
					},
					"requestTimeout": {
						"type": "number",
						"format": "double"
					},
					"username": {
						"type": "string",
						"nullable": true
					},
					"password": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"throttling",
					"host",
					"port",
					"sslMode",
					"database",
					"connectionTimeout",
					"requestTimeout",
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthSFTPSettingsAuthentication": {
				"type": "string",
				"enum": [
					"password",
					"private-key"
				]
			},
			"SouthSFTPSettings": {
				"properties": {
					"host": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"authentication": {
						"$ref": "#/components/schemas/SouthSFTPSettingsAuthentication"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string",
						"nullable": true
					},
					"privateKey": {
						"type": "string"
					},
					"passphrase": {
						"type": "string",
						"nullable": true
					},
					"compression": {
						"type": "boolean"
					}
				},
				"required": [
					"host",
					"port",
					"authentication",
					"username",
					"compression"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthSQLiteSettingsThrottling": {
				"properties": {
					"maxReadInterval": {
						"type": "number",
						"format": "double"
					},
					"readDelay": {
						"type": "number",
						"format": "double"
					},
					"overlap": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"maxReadInterval",
					"readDelay",
					"overlap"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthSQLiteSettings": {
				"properties": {
					"throttling": {
						"$ref": "#/components/schemas/SouthSQLiteSettingsThrottling"
					},
					"databasePath": {
						"type": "string"
					}
				},
				"required": [
					"throttling",
					"databasePath"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthSettings": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/SouthADSSettings"
					},
					{
						"$ref": "#/components/schemas/SouthFolderScannerSettings"
					},
					{
						"$ref": "#/components/schemas/SouthFTPSettings"
					},
					{
						"$ref": "#/components/schemas/SouthModbusSettings"
					},
					{
						"$ref": "#/components/schemas/SouthMQTTSettings"
					},
					{
						"$ref": "#/components/schemas/SouthMSSQLSettings"
					},
					{
						"$ref": "#/components/schemas/SouthMySQLSettings"
					},
					{
						"$ref": "#/components/schemas/SouthODBCSettings"
					},
					{
						"$ref": "#/components/schemas/SouthOIAnalyticsSettings"
					},
					{
						"$ref": "#/components/schemas/SouthOLEDBSettings"
					},
					{
						"$ref": "#/components/schemas/SouthOPCSettings"
					},
					{
						"$ref": "#/components/schemas/SouthOPCUASettings"
					},
					{
						"$ref": "#/components/schemas/SouthOracleSettings"
					},
					{
						"$ref": "#/components/schemas/SouthPISettings"
					},
					{
						"$ref": "#/components/schemas/SouthPostgreSQLSettings"
					},
					{
						"$ref": "#/components/schemas/SouthSFTPSettings"
					},
					{
						"$ref": "#/components/schemas/SouthSQLiteSettings"
					}
				]
			},
			"SouthADSItemSettings": {
				"properties": {
					"address": {
						"type": "string"
					}
				},
				"required": [
					"address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthFolderScannerItemSettings": {
				"properties": {
					"regex": {
						"type": "string"
					},
					"minAge": {
						"type": "number",
						"format": "double"
					},
					"preserveFiles": {
						"type": "boolean"
					},
					"ignoreModifiedDate": {
						"type": "boolean"
					}
				},
				"required": [
					"regex",
					"minAge",
					"preserveFiles"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthFTPItemSettings": {
				"properties": {
					"remoteFolder": {
						"type": "string"
					},
					"regex": {
						"type": "string"
					},
					"minAge": {
						"type": "number",
						"format": "double"
					},
					"preserveFiles": {
						"type": "boolean"
					},
					"ignoreModifiedDate": {
						"type": "boolean"
					}
				},
				"required": [
					"remoteFolder",
					"regex",
					"minAge",
					"preserveFiles"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthModbusItemSettingsModbusType": {
				"type": "string",
				"enum": [
					"coil",
					"discrete-input",
					"input-register",
					"holding-register"
				]
			},
			"SouthModbusItemSettingsDataDataType": {
				"type": "string",
				"enum": [
					"uint16",
					"int16",
					"uint32",
					"int32",
					"big-uint64",
					"big-int64",
					"float",
					"double",
					"bit"
				]
			},
			"SouthModbusItemSettingsData": {
				"properties": {
					"dataType": {
						"$ref": "#/components/schemas/SouthModbusItemSettingsDataDataType"
					},
					"bitIndex": {
						"type": "number",
						"format": "double"
					},
					"multiplierCoefficient": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"dataType",
					"multiplierCoefficient"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthModbusItemSettings": {
				"properties": {
					"address": {
						"type": "string"
					},
					"modbusType": {
						"$ref": "#/components/schemas/SouthModbusItemSettingsModbusType"
					},
					"data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SouthModbusItemSettingsData"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"address",
					"modbusType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMQTTItemSettingsValueType": {
				"type": "string",
				"enum": [
					"string",
					"number",
					"json"
				]
			},
			"SouthMQTTItemSettingsJsonPayloadPointIdOrigin": {
				"type": "string",
				"enum": [
					"oibus",
					"payload"
				]
			},
			"SouthMQTTItemSettingsJsonPayloadTimestampOrigin": {
				"type": "string",
				"enum": [
					"oibus",
					"payload"
				]
			},
			"SouthMQTTItemSettingsJsonPayloadTimestampPayloadTimestampType": {
				"type": "string",
				"enum": [
					"string",
					"iso-string",
					"unix-epoch",
					"unix-epoch-ms"
				]
			},
			"SouthMQTTItemSettingsJsonPayloadTimestampPayload": {
				"properties": {
					"timestampPath": {
						"type": "string"
					},
					"timestampType": {
						"$ref": "#/components/schemas/SouthMQTTItemSettingsJsonPayloadTimestampPayloadTimestampType"
					},
					"timestampFormat": {
						"type": "string"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone"
					}
				},
				"required": [
					"timestampPath",
					"timestampType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMQTTItemSettingsJsonPayloadOtherFields": {
				"properties": {
					"name": {
						"type": "string"
					},
					"path": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"path"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMQTTItemSettingsJsonPayload": {
				"properties": {
					"useArray": {
						"type": "boolean"
					},
					"dataArrayPath": {
						"type": "string"
					},
					"valuePath": {
						"type": "string"
					},
					"pointIdOrigin": {
						"$ref": "#/components/schemas/SouthMQTTItemSettingsJsonPayloadPointIdOrigin"
					},
					"pointIdPath": {
						"type": "string"
					},
					"timestampOrigin": {
						"$ref": "#/components/schemas/SouthMQTTItemSettingsJsonPayloadTimestampOrigin"
					},
					"timestampPayload": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SouthMQTTItemSettingsJsonPayloadTimestampPayload"
							}
						],
						"nullable": true
					},
					"otherFields": {
						"items": {
							"$ref": "#/components/schemas/SouthMQTTItemSettingsJsonPayloadOtherFields"
						},
						"type": "array",
						"nullable": true
					}
				},
				"required": [
					"useArray",
					"valuePath",
					"pointIdOrigin",
					"timestampOrigin",
					"otherFields"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMQTTItemSettings": {
				"properties": {
					"topic": {
						"type": "string"
					},
					"valueType": {
						"$ref": "#/components/schemas/SouthMQTTItemSettingsValueType"
					},
					"jsonPayload": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SouthMQTTItemSettingsJsonPayload"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"topic",
					"valueType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMSSQLItemSettingsDateTimeFieldsType": {
				"type": "string",
				"enum": [
					"string",
					"iso-string",
					"unix-epoch",
					"unix-epoch-ms",
					"date",
					"date-time",
					"date-time-2",
					"date-time-offset",
					"small-date-time"
				]
			},
			"SouthMSSQLItemSettingsDateTimeFields": {
				"properties": {
					"fieldName": {
						"type": "string"
					},
					"useAsReference": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/SouthMSSQLItemSettingsDateTimeFieldsType"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone"
					},
					"format": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					}
				},
				"required": [
					"fieldName",
					"useAsReference",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMSSQLItemSettingsSerializationType": {
				"type": "string",
				"enum": [
					"csv"
				],
				"nullable": false
			},
			"SouthMSSQLItemSettingsSerializationDelimiter": {
				"type": "string",
				"enum": [
					"DOT",
					"SEMI_COLON",
					"COLON",
					"COMMA",
					"NON_BREAKING_SPACE",
					"SLASH",
					"TAB",
					"PIPE"
				]
			},
			"SouthMSSQLItemSettingsSerialization": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthMSSQLItemSettingsSerializationType"
					},
					"filename": {
						"type": "string"
					},
					"delimiter": {
						"$ref": "#/components/schemas/SouthMSSQLItemSettingsSerializationDelimiter"
					},
					"compression": {
						"type": "boolean"
					},
					"outputTimestampFormat": {
						"type": "string"
					},
					"outputTimezone": {
						"$ref": "#/components/schemas/Timezone"
					}
				},
				"required": [
					"type",
					"filename",
					"delimiter",
					"compression",
					"outputTimestampFormat",
					"outputTimezone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMSSQLItemSettings": {
				"properties": {
					"query": {
						"type": "string"
					},
					"dateTimeFields": {
						"items": {
							"$ref": "#/components/schemas/SouthMSSQLItemSettingsDateTimeFields"
						},
						"type": "array",
						"nullable": true
					},
					"serialization": {
						"$ref": "#/components/schemas/SouthMSSQLItemSettingsSerialization"
					}
				},
				"required": [
					"query",
					"dateTimeFields",
					"serialization"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMySQLItemSettingsDateTimeFieldsType": {
				"type": "string",
				"enum": [
					"string",
					"iso-string",
					"unix-epoch",
					"unix-epoch-ms",
					"date-time"
				]
			},
			"SouthMySQLItemSettingsDateTimeFields": {
				"properties": {
					"fieldName": {
						"type": "string"
					},
					"useAsReference": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/SouthMySQLItemSettingsDateTimeFieldsType"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone"
					},
					"format": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					}
				},
				"required": [
					"fieldName",
					"useAsReference",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMySQLItemSettingsSerializationType": {
				"type": "string",
				"enum": [
					"csv"
				],
				"nullable": false
			},
			"SouthMySQLItemSettingsSerializationDelimiter": {
				"type": "string",
				"enum": [
					"DOT",
					"SEMI_COLON",
					"COLON",
					"COMMA",
					"NON_BREAKING_SPACE",
					"SLASH",
					"TAB",
					"PIPE"
				]
			},
			"SouthMySQLItemSettingsSerialization": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthMySQLItemSettingsSerializationType"
					},
					"filename": {
						"type": "string"
					},
					"delimiter": {
						"$ref": "#/components/schemas/SouthMySQLItemSettingsSerializationDelimiter"
					},
					"compression": {
						"type": "boolean"
					},
					"outputTimestampFormat": {
						"type": "string"
					},
					"outputTimezone": {
						"$ref": "#/components/schemas/Timezone"
					}
				},
				"required": [
					"type",
					"filename",
					"delimiter",
					"compression",
					"outputTimestampFormat",
					"outputTimezone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthMySQLItemSettings": {
				"properties": {
					"query": {
						"type": "string"
					},
					"requestTimeout": {
						"type": "number",
						"format": "double"
					},
					"dateTimeFields": {
						"items": {
							"$ref": "#/components/schemas/SouthMySQLItemSettingsDateTimeFields"
						},
						"type": "array",
						"nullable": true
					},
					"serialization": {
						"$ref": "#/components/schemas/SouthMySQLItemSettingsSerialization"
					}
				},
				"required": [
					"query",
					"requestTimeout",
					"dateTimeFields",
					"serialization"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthODBCItemSettingsDateTimeFieldsType": {
				"type": "string",
				"enum": [
					"string",
					"iso-string",
					"unix-epoch",
					"unix-epoch-ms"
				]
			},
			"SouthODBCItemSettingsDateTimeFields": {
				"properties": {
					"fieldName": {
						"type": "string"
					},
					"useAsReference": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/SouthODBCItemSettingsDateTimeFieldsType"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone"
					},
					"format": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					}
				},
				"required": [
					"fieldName",
					"useAsReference",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthODBCItemSettingsSerializationType": {
				"type": "string",
				"enum": [
					"csv"
				],
				"nullable": false
			},
			"SouthODBCItemSettingsSerializationDelimiter": {
				"type": "string",
				"enum": [
					"DOT",
					"SEMI_COLON",
					"COLON",
					"COMMA",
					"NON_BREAKING_SPACE",
					"SLASH",
					"TAB",
					"PIPE"
				]
			},
			"SouthODBCItemSettingsSerialization": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthODBCItemSettingsSerializationType"
					},
					"filename": {
						"type": "string"
					},
					"delimiter": {
						"$ref": "#/components/schemas/SouthODBCItemSettingsSerializationDelimiter"
					},
					"compression": {
						"type": "boolean"
					},
					"outputTimestampFormat": {
						"type": "string"
					},
					"outputTimezone": {
						"$ref": "#/components/schemas/Timezone"
					}
				},
				"required": [
					"type",
					"filename",
					"delimiter",
					"compression",
					"outputTimestampFormat",
					"outputTimezone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthODBCItemSettings": {
				"properties": {
					"query": {
						"type": "string"
					},
					"dateTimeFields": {
						"items": {
							"$ref": "#/components/schemas/SouthODBCItemSettingsDateTimeFields"
						},
						"type": "array",
						"nullable": true
					},
					"serialization": {
						"$ref": "#/components/schemas/SouthODBCItemSettingsSerialization"
					}
				},
				"required": [
					"query",
					"dateTimeFields",
					"serialization"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOIAnalyticsItemSettingsQueryParams": {
				"properties": {
					"key": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"key",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOIAnalyticsItemSettingsSerializationType": {
				"type": "string",
				"enum": [
					"csv"
				],
				"nullable": false
			},
			"SouthOIAnalyticsItemSettingsSerializationDelimiter": {
				"type": "string",
				"enum": [
					"DOT",
					"SEMI_COLON",
					"COLON",
					"COMMA",
					"NON_BREAKING_SPACE",
					"SLASH",
					"TAB",
					"PIPE"
				]
			},
			"SouthOIAnalyticsItemSettingsSerialization": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthOIAnalyticsItemSettingsSerializationType"
					},
					"filename": {
						"type": "string"
					},
					"delimiter": {
						"$ref": "#/components/schemas/SouthOIAnalyticsItemSettingsSerializationDelimiter"
					},
					"compression": {
						"type": "boolean"
					},
					"outputTimestampFormat": {
						"type": "string"
					},
					"outputTimezone": {
						"$ref": "#/components/schemas/Timezone"
					}
				},
				"required": [
					"type",
					"filename",
					"delimiter",
					"compression",
					"outputTimestampFormat",
					"outputTimezone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOIAnalyticsItemSettings": {
				"properties": {
					"endpoint": {
						"type": "string"
					},
					"queryParams": {
						"items": {
							"$ref": "#/components/schemas/SouthOIAnalyticsItemSettingsQueryParams"
						},
						"type": "array",
						"nullable": true
					},
					"serialization": {
						"$ref": "#/components/schemas/SouthOIAnalyticsItemSettingsSerialization"
					}
				},
				"required": [
					"endpoint",
					"queryParams",
					"serialization"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOLEDBItemSettingsDateTimeFieldsType": {
				"type": "string",
				"enum": [
					"string",
					"iso-string",
					"unix-epoch",
					"unix-epoch-ms"
				]
			},
			"SouthOLEDBItemSettingsDateTimeFields": {
				"properties": {
					"fieldName": {
						"type": "string"
					},
					"useAsReference": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/SouthOLEDBItemSettingsDateTimeFieldsType"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone"
					},
					"format": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					}
				},
				"required": [
					"fieldName",
					"useAsReference",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOLEDBItemSettingsSerializationType": {
				"type": "string",
				"enum": [
					"csv"
				],
				"nullable": false
			},
			"SouthOLEDBItemSettingsSerializationDelimiter": {
				"type": "string",
				"enum": [
					"DOT",
					"SEMI_COLON",
					"COLON",
					"COMMA",
					"NON_BREAKING_SPACE",
					"SLASH",
					"TAB",
					"PIPE"
				]
			},
			"SouthOLEDBItemSettingsSerialization": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthOLEDBItemSettingsSerializationType"
					},
					"filename": {
						"type": "string"
					},
					"delimiter": {
						"$ref": "#/components/schemas/SouthOLEDBItemSettingsSerializationDelimiter"
					},
					"compression": {
						"type": "boolean"
					},
					"outputTimestampFormat": {
						"type": "string"
					},
					"outputTimezone": {
						"$ref": "#/components/schemas/Timezone"
					}
				},
				"required": [
					"type",
					"filename",
					"delimiter",
					"compression",
					"outputTimestampFormat",
					"outputTimezone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOLEDBItemSettings": {
				"properties": {
					"query": {
						"type": "string"
					},
					"dateTimeFields": {
						"items": {
							"$ref": "#/components/schemas/SouthOLEDBItemSettingsDateTimeFields"
						},
						"type": "array",
						"nullable": true
					},
					"serialization": {
						"$ref": "#/components/schemas/SouthOLEDBItemSettingsSerialization"
					}
				},
				"required": [
					"query",
					"dateTimeFields",
					"serialization"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOPCItemSettingsAggregate": {
				"type": "string",
				"enum": [
					"raw",
					"interpolative",
					"total",
					"average",
					"time-average",
					"count",
					"stdev",
					"minimum-actual-time",
					"minimum",
					"maximum-actual-time",
					"maximum",
					"start",
					"end",
					"delta",
					"reg-slope",
					"reg-const",
					"reg-dev",
					"variance",
					"range",
					"duration-good",
					"duration-bad",
					"percent-good",
					"percent-bad",
					"worst-quality",
					"annotations"
				]
			},
			"SouthOPCItemSettingsResampling": {
				"type": "string",
				"enum": [
					"none",
					"1s",
					"10s",
					"30s",
					"1min",
					"1h",
					"1d"
				]
			},
			"SouthOPCItemSettings": {
				"properties": {
					"nodeId": {
						"type": "string"
					},
					"aggregate": {
						"$ref": "#/components/schemas/SouthOPCItemSettingsAggregate"
					},
					"resampling": {
						"$ref": "#/components/schemas/SouthOPCItemSettingsResampling"
					}
				},
				"required": [
					"nodeId",
					"aggregate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOPCUAItemSettingsMode": {
				"type": "string",
				"enum": [
					"da",
					"ha"
				]
			},
			"SouthOPCUAItemSettingsHaModeAggregate": {
				"type": "string",
				"enum": [
					"raw",
					"average",
					"count",
					"minimum",
					"maximum"
				]
			},
			"SouthOPCUAItemSettingsHaModeResampling": {
				"type": "string",
				"enum": [
					"none",
					"1s",
					"10s",
					"30s",
					"1min",
					"1h",
					"1d"
				]
			},
			"SouthOPCUAItemSettingsHaMode": {
				"properties": {
					"aggregate": {
						"$ref": "#/components/schemas/SouthOPCUAItemSettingsHaModeAggregate"
					},
					"resampling": {
						"$ref": "#/components/schemas/SouthOPCUAItemSettingsHaModeResampling"
					}
				},
				"required": [
					"aggregate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOPCUAItemSettingsTimestampOrigin": {
				"type": "string",
				"enum": [
					"oibus",
					"point",
					"server"
				]
			},
			"SouthOPCUAItemSettings": {
				"properties": {
					"nodeId": {
						"type": "string"
					},
					"mode": {
						"$ref": "#/components/schemas/SouthOPCUAItemSettingsMode"
					},
					"haMode": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SouthOPCUAItemSettingsHaMode"
							}
						],
						"nullable": true
					},
					"timestampOrigin": {
						"$ref": "#/components/schemas/SouthOPCUAItemSettingsTimestampOrigin"
					}
				},
				"required": [
					"nodeId",
					"mode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOracleItemSettingsDateTimeFieldsType": {
				"type": "string",
				"enum": [
					"string",
					"iso-string",
					"unix-epoch",
					"unix-epoch-ms",
					"date-time"
				]
			},
			"SouthOracleItemSettingsDateTimeFields": {
				"properties": {
					"fieldName": {
						"type": "string"
					},
					"useAsReference": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/SouthOracleItemSettingsDateTimeFieldsType"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone"
					},
					"format": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					}
				},
				"required": [
					"fieldName",
					"useAsReference",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOracleItemSettingsSerializationType": {
				"type": "string",
				"enum": [
					"csv"
				],
				"nullable": false
			},
			"SouthOracleItemSettingsSerializationDelimiter": {
				"type": "string",
				"enum": [
					"DOT",
					"SEMI_COLON",
					"COLON",
					"COMMA",
					"NON_BREAKING_SPACE",
					"SLASH",
					"TAB",
					"PIPE"
				]
			},
			"SouthOracleItemSettingsSerialization": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthOracleItemSettingsSerializationType"
					},
					"filename": {
						"type": "string"
					},
					"delimiter": {
						"$ref": "#/components/schemas/SouthOracleItemSettingsSerializationDelimiter"
					},
					"compression": {
						"type": "boolean"
					},
					"outputTimestampFormat": {
						"type": "string"
					},
					"outputTimezone": {
						"$ref": "#/components/schemas/Timezone"
					}
				},
				"required": [
					"type",
					"filename",
					"delimiter",
					"compression",
					"outputTimestampFormat",
					"outputTimezone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthOracleItemSettings": {
				"properties": {
					"query": {
						"type": "string"
					},
					"requestTimeout": {
						"type": "number",
						"format": "double"
					},
					"dateTimeFields": {
						"items": {
							"$ref": "#/components/schemas/SouthOracleItemSettingsDateTimeFields"
						},
						"type": "array",
						"nullable": true
					},
					"serialization": {
						"$ref": "#/components/schemas/SouthOracleItemSettingsSerialization"
					}
				},
				"required": [
					"query",
					"requestTimeout",
					"dateTimeFields",
					"serialization"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthPIItemSettingsType": {
				"type": "string",
				"enum": [
					"point-id",
					"point-query"
				]
			},
			"SouthPIItemSettings": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthPIItemSettingsType"
					},
					"piPoint": {
						"type": "string"
					},
					"piQuery": {
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthPostgreSQLItemSettingsDateTimeFieldsType": {
				"type": "string",
				"enum": [
					"string",
					"iso-string",
					"unix-epoch",
					"unix-epoch-ms",
					"timestamp",
					"timestamptz"
				]
			},
			"SouthPostgreSQLItemSettingsDateTimeFields": {
				"properties": {
					"fieldName": {
						"type": "string"
					},
					"useAsReference": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/SouthPostgreSQLItemSettingsDateTimeFieldsType"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone"
					},
					"format": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					}
				},
				"required": [
					"fieldName",
					"useAsReference",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthPostgreSQLItemSettingsSerializationType": {
				"type": "string",
				"enum": [
					"csv"
				],
				"nullable": false
			},
			"SouthPostgreSQLItemSettingsSerializationDelimiter": {
				"type": "string",
				"enum": [
					"DOT",
					"SEMI_COLON",
					"COLON",
					"COMMA",
					"NON_BREAKING_SPACE",
					"SLASH",
					"TAB",
					"PIPE"
				]
			},
			"SouthPostgreSQLItemSettingsSerialization": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthPostgreSQLItemSettingsSerializationType"
					},
					"filename": {
						"type": "string"
					},
					"delimiter": {
						"$ref": "#/components/schemas/SouthPostgreSQLItemSettingsSerializationDelimiter"
					},
					"compression": {
						"type": "boolean"
					},
					"outputTimestampFormat": {
						"type": "string"
					},
					"outputTimezone": {
						"$ref": "#/components/schemas/Timezone"
					}
				},
				"required": [
					"type",
					"filename",
					"delimiter",
					"compression",
					"outputTimestampFormat",
					"outputTimezone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthPostgreSQLItemSettings": {
				"properties": {
					"query": {
						"type": "string"
					},
					"dateTimeFields": {
						"items": {
							"$ref": "#/components/schemas/SouthPostgreSQLItemSettingsDateTimeFields"
						},
						"type": "array",
						"nullable": true
					},
					"serialization": {
						"$ref": "#/components/schemas/SouthPostgreSQLItemSettingsSerialization"
					}
				},
				"required": [
					"query",
					"dateTimeFields",
					"serialization"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthSFTPItemSettings": {
				"properties": {
					"remoteFolder": {
						"type": "string"
					},
					"regex": {
						"type": "string"
					},
					"minAge": {
						"type": "number",
						"format": "double"
					},
					"preserveFiles": {
						"type": "boolean"
					},
					"ignoreModifiedDate": {
						"type": "boolean"
					}
				},
				"required": [
					"remoteFolder",
					"regex",
					"minAge",
					"preserveFiles"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthSQLiteItemSettingsDateTimeFieldsType": {
				"type": "string",
				"enum": [
					"string",
					"iso-string",
					"unix-epoch",
					"unix-epoch-ms"
				]
			},
			"SouthSQLiteItemSettingsDateTimeFields": {
				"properties": {
					"fieldName": {
						"type": "string"
					},
					"useAsReference": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/SouthSQLiteItemSettingsDateTimeFieldsType"
					},
					"timezone": {
						"$ref": "#/components/schemas/Timezone"
					},
					"format": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					}
				},
				"required": [
					"fieldName",
					"useAsReference",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthSQLiteItemSettingsSerializationType": {
				"type": "string",
				"enum": [
					"csv"
				],
				"nullable": false
			},
			"SouthSQLiteItemSettingsSerializationDelimiter": {
				"type": "string",
				"enum": [
					"DOT",
					"SEMI_COLON",
					"COLON",
					"COMMA",
					"NON_BREAKING_SPACE",
					"SLASH",
					"TAB",
					"PIPE"
				]
			},
			"SouthSQLiteItemSettingsSerialization": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SouthSQLiteItemSettingsSerializationType"
					},
					"filename": {
						"type": "string"
					},
					"delimiter": {
						"$ref": "#/components/schemas/SouthSQLiteItemSettingsSerializationDelimiter"
					},
					"compression": {
						"type": "boolean"
					},
					"outputTimestampFormat": {
						"type": "string"
					},
					"outputTimezone": {
						"$ref": "#/components/schemas/Timezone"
					}
				},
				"required": [
					"type",
					"filename",
					"delimiter",
					"compression",
					"outputTimestampFormat",
					"outputTimezone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthSQLiteItemSettings": {
				"properties": {
					"query": {
						"type": "string"
					},
					"dateTimeFields": {
						"items": {
							"$ref": "#/components/schemas/SouthSQLiteItemSettingsDateTimeFields"
						},
						"type": "array",
						"nullable": true
					},
					"serialization": {
						"$ref": "#/components/schemas/SouthSQLiteItemSettingsSerialization"
					}
				},
				"required": [
					"query",
					"dateTimeFields",
					"serialization"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthItemSettings": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/SouthADSItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthFolderScannerItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthFTPItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthModbusItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthMQTTItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthMSSQLItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthMySQLItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthODBCItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthOIAnalyticsItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthOLEDBItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthOPCItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthOPCUAItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthOracleItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthPIItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthPostgreSQLItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthSFTPItemSettings"
					},
					{
						"$ref": "#/components/schemas/SouthSQLiteItemSettings"
					}
				]
			},
			"ScanModeDTO": {
				"description": "Data Transfer Object for a scan mode.\nRepresents a configured scan mode with its metadata and schedule.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string",
						"description": "The name of the scan mode.",
						"example": "Daily Backup Scan"
					},
					"description": {
						"type": "string",
						"description": "A description of the scan mode's purpose or behavior.",
						"example": "Scans for new backup data every day at midnight"
					},
					"cron": {
						"type": "string",
						"description": "A cron expression defining the scan schedule.",
						"example": "0 0 * * *"
					}
				},
				"required": [
					"id",
					"name",
					"description",
					"cron"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "aBc12F",
					"name": "Daily Backup Scan",
					"description": "Scans for new backup data every day at midnight",
					"cron": "0 0 * * *",
					"createdAt": "2023-01-01T00:00:00Z",
					"updatedAt": "2023-01-01T00:00:00Z"
				}
			},
			"SouthConnectorItemDTO_SouthItemSettings_": {
				"description": "DTO used for an item to query within a south",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"settings": {
						"$ref": "#/components/schemas/SouthItemSettings"
					},
					"scanMode": {
						"$ref": "#/components/schemas/ScanModeDTO"
					}
				},
				"required": [
					"id",
					"name",
					"enabled",
					"settings",
					"scanMode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthConnectorDTO_SouthSettings.SouthItemSettings_": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/OIBusSouthType"
					},
					"description": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"settings": {
						"$ref": "#/components/schemas/SouthSettings"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/SouthConnectorItemDTO_SouthItemSettings_"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"type",
					"description",
					"enabled",
					"settings",
					"items"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthConnectorItemCommandDTO_SouthItemSettings_": {
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"enabled": {
						"type": "boolean"
					},
					"name": {
						"type": "string"
					},
					"settings": {
						"$ref": "#/components/schemas/SouthItemSettings"
					},
					"scanModeId": {
						"type": "string",
						"nullable": true
					},
					"scanModeName": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"enabled",
					"name",
					"settings",
					"scanModeId",
					"scanModeName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SouthConnectorCommandDTO_SouthSettings.SouthItemSettings_": {
				"properties": {
					"name": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/OIBusSouthType"
					},
					"description": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"settings": {
						"$ref": "#/components/schemas/SouthSettings"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/SouthConnectorItemCommandDTO_SouthItemSettings_"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"type",
					"description",
					"enabled",
					"settings",
					"items"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusTimeValue": {
				"description": "A time-value pair.",
				"properties": {
					"pointId": {
						"type": "string",
						"description": "The ID of the point.",
						"example": "point1"
					},
					"timestamp": {
						"$ref": "#/components/schemas/Instant",
						"description": "The timestamp of the value.",
						"example": "2023-01-01T00:00:00Z"
					},
					"data": {
						"properties": {
							"value": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								],
								"description": "The value of the point.",
								"example": 100
							}
						},
						"additionalProperties": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "number",
									"format": "double"
								}
							]
						},
						"required": [
							"value"
						],
						"type": "object",
						"description": "The data associated with the point."
					}
				},
				"required": [
					"pointId",
					"timestamp",
					"data"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"pointId": "point1",
					"timestamp": "2023-01-01T00:00:00Z",
					"data": {
						"value": 100
					}
				}
			},
			"OIBusTimeValueContent": {
				"description": "Time-value content.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"time-values"
						],
						"nullable": false,
						"description": "The type of content.",
						"example": "time-values"
					},
					"content": {
						"items": {
							"$ref": "#/components/schemas/OIBusTimeValue"
						},
						"type": "array",
						"description": "The array of time-value pairs."
					}
				},
				"required": [
					"type",
					"content"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"type": "time-values",
					"content": [
						{
							"pointId": "point1",
							"timestamp": "2023-01-01T00:00:00Z",
							"data": {
								"value": 100
							}
						}
					]
				}
			},
			"OIBusRawContent": {
				"description": "Raw content.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"any"
						],
						"nullable": false,
						"description": "The type of content.",
						"example": "any"
					},
					"filePath": {
						"type": "string",
						"description": "The path to the file containing the content.",
						"example": "/path/to/file.json"
					},
					"content": {
						"type": "string",
						"description": "The content itself, if available.",
						"example": "{\"key\": \"value\"}"
					}
				},
				"required": [
					"type",
					"filePath"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"type": "any",
					"filePath": "/path/to/file.json",
					"content": "{\"key\": \"value\"}"
				}
			},
			"OIBusSetpoint": {
				"description": "A setpoint.",
				"properties": {
					"reference": {
						"type": "string",
						"description": "The reference of the setpoint.",
						"example": "setpoint1"
					},
					"value": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "boolean"
							}
						],
						"description": "The value of the setpoint.",
						"example": 100
					}
				},
				"required": [
					"reference",
					"value"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"reference": "setpoint1",
					"value": 100
				}
			},
			"OIBusSetpointContent": {
				"description": "Setpoint content.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"setpoint"
						],
						"nullable": false,
						"description": "The type of content.",
						"example": "setpoint"
					},
					"content": {
						"items": {
							"$ref": "#/components/schemas/OIBusSetpoint"
						},
						"type": "array",
						"description": "The array of setpoints."
					}
				},
				"required": [
					"type",
					"content"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"type": "setpoint",
					"content": [
						{
							"reference": "setpoint1",
							"value": 100
						}
					]
				}
			},
			"OIBusContent": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/OIBusTimeValueContent"
					},
					{
						"$ref": "#/components/schemas/OIBusRawContent"
					},
					{
						"$ref": "#/components/schemas/OIBusSetpointContent"
					}
				],
				"description": "Type representing OIBus content."
			},
			"SouthConnectorItemTestingSettings": {
				"properties": {
					"history": {
						"properties": {
							"endTime": {
								"type": "string"
							},
							"startTime": {
								"type": "string"
							}
						},
						"required": [
							"endTime",
							"startTime"
						],
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"SouthItemTestRequest": {
				"properties": {
					"southSettings": {
						"$ref": "#/components/schemas/SouthSettings",
						"description": "South connector settings"
					},
					"itemSettings": {
						"$ref": "#/components/schemas/SouthItemSettings",
						"description": "Item-specific settings"
					},
					"testingSettings": {
						"$ref": "#/components/schemas/SouthConnectorItemTestingSettings",
						"description": "Testing settings including time range"
					}
				},
				"required": [
					"southSettings",
					"itemSettings",
					"testingSettings"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Page_SouthConnectorItemDTO_SouthItemSettings__": {
				"description": "Represents a paginated response containing an array of elements.",
				"properties": {
					"content": {
						"items": {
							"$ref": "#/components/schemas/SouthConnectorItemDTO_SouthItemSettings_"
						},
						"type": "array",
						"description": "The content of the page - an array of elements."
					},
					"totalElements": {
						"type": "number",
						"format": "double",
						"description": "The total number of elements across all pages.",
						"example": 2
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "The size of the page, i.e., the maximum number of elements per page.",
						"example": 10
					},
					"number": {
						"type": "number",
						"format": "double",
						"description": "The number of the current page, starting at 0.",
						"example": 0
					},
					"totalPages": {
						"type": "number",
						"format": "double",
						"description": "The total number of pages (which can be 0 if there are no elements).",
						"example": 1
					}
				},
				"required": [
					"content",
					"totalElements",
					"size",
					"number",
					"totalPages"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"content": [
						{
							"id": "item1"
						},
						{
							"id": "item2"
						}
					],
					"totalElements": 2,
					"size": 10,
					"number": 0,
					"totalPages": 1
				}
			},
			"SouthCsvDelimiterRequest": {
				"properties": {
					"delimiter": {
						"type": "string",
						"description": "CSV delimiter character"
					}
				},
				"required": [
					"delimiter"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.string_": {
				"properties": {},
				"additionalProperties": {
					"type": "string"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"SouthCsvImportResponse": {
				"properties": {
					"items": {
						"items": {
							"$ref": "#/components/schemas/SouthConnectorItemDTO_SouthItemSettings_"
						},
						"type": "array",
						"description": "Array of valid items that can be imported"
					},
					"errors": {
						"items": {
							"properties": {
								"error": {
									"type": "string"
								},
								"item": {
									"$ref": "#/components/schemas/Record_string.string_"
								}
							},
							"required": [
								"error",
								"item"
							],
							"type": "object"
						},
						"type": "array",
						"description": "Array of items with errors"
					}
				},
				"required": [
					"items",
					"errors"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ScanModeCommandDTO": {
				"description": "Command DTO for creating or updating a scan mode.\nUsed as the request body for scan mode creation/update endpoints.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the scan mode.",
						"example": "Daily Backup Scan"
					},
					"description": {
						"type": "string",
						"description": "A description of the scan mode's purpose or behavior.",
						"example": "Scans for new backup data every day at midnight"
					},
					"cron": {
						"type": "string",
						"description": "A cron expression defining the scan schedule.",
						"example": "0 0 * * *"
					}
				},
				"required": [
					"name",
					"description",
					"cron"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"name": "Daily Backup Scan",
					"description": "Scans for new backup data every day at midnight",
					"cron": "0 0 * * *"
				}
			},
			"ValidatedCronExpression": {
				"description": "Result of validating a cron expression.\nIncludes validation status, error messages, and execution details.",
				"properties": {
					"isValid": {
						"type": "boolean",
						"description": "Whether the cron expression is valid.",
						"example": true
					},
					"errorMessage": {
						"type": "string",
						"description": "Error message if the cron expression is invalid.\nEmpty string if the expression is valid.",
						"example": ""
					},
					"nextExecutions": {
						"items": {
							"$ref": "#/components/schemas/Instant"
						},
						"type": "array",
						"description": "The next 5 execution times for the cron expression.\nEmpty if the expression is invalid.",
						"example": [
							"2023-01-01T00:00:00Z",
							"2023-01-02T00:00:00Z",
							"2023-01-03T00:00:00Z",
							"2023-01-04T00:00:00Z",
							"2023-01-05T00:00:00Z"
						]
					},
					"humanReadableForm": {
						"type": "string",
						"description": "A human-readable description of the cron expression.",
						"example": "At 00:00 every day"
					}
				},
				"required": [
					"isValid",
					"errorMessage",
					"nextExecutions",
					"humanReadableForm"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"isValid": true,
					"errorMessage": "",
					"nextExecutions": [
						"2023-01-01T00:00:00Z",
						"2023-01-02T00:00:00Z",
						"2023-01-03T00:00:00Z",
						"2023-01-04T00:00:00Z",
						"2023-01-05T00:00:00Z"
					],
					"humanReadableForm": "At 00:00 every day"
				}
			},
			"RegistrationStatus": {
				"type": "string",
				"enum": [
					"NOT_REGISTERED",
					"PENDING",
					"REGISTERED"
				],
				"description": "Type representing a registration status."
			},
			"RegistrationSettingsDTO": {
				"description": "Registration settings Data Transfer Object.\nRepresents the registration settings for the engine.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"host": {
						"type": "string",
						"description": "The host URL for registration.",
						"example": "https://registration.example.com"
					},
					"activationCode": {
						"type": "string",
						"nullable": true,
						"description": "The activation code for registration.",
						"example": "ABC123"
					},
					"status": {
						"$ref": "#/components/schemas/RegistrationStatus",
						"description": "The current registration status.",
						"example": "REGISTERED"
					},
					"activationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the activation occurred.",
						"example": "2023-01-01T00:00:00Z"
					},
					"activationExpirationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the activation expires.",
						"example": "2024-01-01T00:00:00Z"
					},
					"checkUrl": {
						"type": "string",
						"nullable": true,
						"description": "The URL to check registration status.",
						"example": "https://registration.example.com/check"
					},
					"useProxy": {
						"type": "boolean",
						"description": "Whether to use a proxy for registration.",
						"example": false
					},
					"proxyUrl": {
						"type": "string",
						"nullable": true,
						"description": "The proxy URL for registration.",
						"example": null
					},
					"proxyUsername": {
						"type": "string",
						"nullable": true,
						"description": "The username for proxy authentication.",
						"example": null
					},
					"acceptUnauthorized": {
						"type": "boolean",
						"description": "Whether to accept unauthorized certificates.",
						"example": false
					},
					"commandRefreshInterval": {
						"type": "number",
						"format": "double",
						"description": "The interval in seconds for refreshing commands.",
						"example": 60
					},
					"commandRetryInterval": {
						"type": "number",
						"format": "double",
						"description": "The interval in seconds for retrying commands.",
						"example": 10
					},
					"messageRetryInterval": {
						"type": "number",
						"format": "double",
						"description": "The interval in seconds for retrying messages.",
						"example": 10
					},
					"commandPermissions": {
						"properties": {
							"setpoint": {
								"type": "boolean",
								"description": "Permission to apply setpoints.",
								"example": true
							},
							"deleteNorth": {
								"type": "boolean",
								"description": "Permission to delete a north connector.",
								"example": true
							},
							"updateNorth": {
								"type": "boolean",
								"description": "Permission to update a north connector.",
								"example": true
							},
							"createNorth": {
								"type": "boolean",
								"description": "Permission to create a north connector.",
								"example": true
							},
							"createOrUpdateSouthItemsFromCsv": {
								"type": "boolean",
								"description": "Permission to create or update south items from CSV.",
								"example": true
							},
							"deleteSouth": {
								"type": "boolean",
								"description": "Permission to delete a south connector.",
								"example": true
							},
							"updateSouth": {
								"type": "boolean",
								"description": "Permission to update a south connector.",
								"example": true
							},
							"createSouth": {
								"type": "boolean",
								"description": "Permission to create a south connector.",
								"example": true
							},
							"createOrUpdateHistoryItemsFromCsv": {
								"type": "boolean",
								"description": "Permission to create or update history items from CSV.",
								"example": true
							},
							"deleteHistoryQuery": {
								"type": "boolean",
								"description": "Permission to delete a history query.",
								"example": true
							},
							"updateHistoryQuery": {
								"type": "boolean",
								"description": "Permission to update a history query.",
								"example": true
							},
							"createHistoryQuery": {
								"type": "boolean",
								"description": "Permission to create a history query.",
								"example": true
							},
							"deleteCertificate": {
								"type": "boolean",
								"description": "Permission to delete a certificate.",
								"example": true
							},
							"updateCertificate": {
								"type": "boolean",
								"description": "Permission to update a certificate.",
								"example": true
							},
							"createCertificate": {
								"type": "boolean",
								"description": "Permission to create a certificate.",
								"example": true
							},
							"deleteIpFilter": {
								"type": "boolean",
								"description": "Permission to delete an IP filter.",
								"example": true
							},
							"updateIpFilter": {
								"type": "boolean",
								"description": "Permission to update an IP filter.",
								"example": true
							},
							"createIpFilter": {
								"type": "boolean",
								"description": "Permission to create an IP filter.",
								"example": true
							},
							"deleteScanMode": {
								"type": "boolean",
								"description": "Permission to delete a scan mode.",
								"example": true
							},
							"updateScanMode": {
								"type": "boolean",
								"description": "Permission to update a scan mode.",
								"example": true
							},
							"createScanMode": {
								"type": "boolean",
								"description": "Permission to create a scan mode.",
								"example": true
							},
							"updateRegistrationSettings": {
								"type": "boolean",
								"description": "Permission to update registration settings.",
								"example": true
							},
							"updateEngineSettings": {
								"type": "boolean",
								"description": "Permission to update engine settings.",
								"example": true
							},
							"regenerateCipherKeys": {
								"type": "boolean",
								"description": "Permission to regenerate cipher keys.",
								"example": true
							},
							"restartEngine": {
								"type": "boolean",
								"description": "Permission to restart the engine.",
								"example": true
							},
							"updateVersion": {
								"type": "boolean",
								"description": "Permission to update the engine version.",
								"example": true
							}
						},
						"required": [
							"setpoint",
							"deleteNorth",
							"updateNorth",
							"createNorth",
							"createOrUpdateSouthItemsFromCsv",
							"deleteSouth",
							"updateSouth",
							"createSouth",
							"createOrUpdateHistoryItemsFromCsv",
							"deleteHistoryQuery",
							"updateHistoryQuery",
							"createHistoryQuery",
							"deleteCertificate",
							"updateCertificate",
							"createCertificate",
							"deleteIpFilter",
							"updateIpFilter",
							"createIpFilter",
							"deleteScanMode",
							"updateScanMode",
							"createScanMode",
							"updateRegistrationSettings",
							"updateEngineSettings",
							"regenerateCipherKeys",
							"restartEngine",
							"updateVersion"
						],
						"type": "object",
						"description": "Permissions for various commands."
					}
				},
				"required": [
					"id",
					"host",
					"activationCode",
					"status",
					"activationDate",
					"checkUrl",
					"useProxy",
					"proxyUrl",
					"proxyUsername",
					"acceptUnauthorized",
					"commandRefreshInterval",
					"commandRetryInterval",
					"messageRetryInterval",
					"commandPermissions"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "aBc12F",
					"host": "https://instance.oianalytics.com",
					"activationCode": "ABC123",
					"status": "REGISTERED",
					"activationDate": "2023-01-01T00:00:00Z",
					"activationExpirationDate": "2024-01-01T00:00:00Z",
					"checkUrl": "https://instance.oianalytics.com/check",
					"useProxy": false,
					"proxyUrl": null,
					"proxyUsername": null,
					"acceptUnauthorized": false,
					"commandRefreshInterval": 60,
					"commandRetryInterval": 10,
					"messageRetryInterval": 10,
					"commandPermissions": {
						"updateVersion": true,
						"restartEngine": true,
						"regenerateCipherKeys": true,
						"updateEngineSettings": true,
						"updateRegistrationSettings": true,
						"createScanMode": true,
						"updateScanMode": true,
						"deleteScanMode": true,
						"createIpFilter": true,
						"updateIpFilter": true,
						"deleteIpFilter": true,
						"createCertificate": true,
						"updateCertificate": true,
						"deleteCertificate": true,
						"createHistoryQuery": true,
						"updateHistoryQuery": true,
						"deleteHistoryQuery": true,
						"createOrUpdateHistoryItemsFromCsv": true,
						"createSouth": true,
						"updateSouth": true,
						"deleteSouth": true,
						"createOrUpdateSouthItemsFromCsv": true,
						"createNorth": true,
						"updateNorth": true,
						"deleteNorth": true,
						"setpoint": true
					}
				}
			},
			"RegistrationSettingsCommandDTO": {
				"description": "Registration settings command Data Transfer Object.\nUsed as the request body for updating registration settings.",
				"properties": {
					"host": {
						"type": "string",
						"description": "The host URL for registration.",
						"example": "https://instant.oianalytics.com"
					},
					"useProxy": {
						"type": "boolean",
						"description": "Whether to use a proxy for registration.",
						"example": false
					},
					"proxyUrl": {
						"type": "string",
						"nullable": true,
						"description": "The proxy URL for registration.",
						"example": null
					},
					"proxyUsername": {
						"type": "string",
						"nullable": true,
						"description": "The username for proxy authentication.",
						"example": null
					},
					"proxyPassword": {
						"type": "string",
						"nullable": true,
						"description": "The password for proxy authentication.",
						"example": null
					},
					"acceptUnauthorized": {
						"type": "boolean",
						"description": "Whether to accept unauthorized certificates.",
						"example": false
					},
					"commandRefreshInterval": {
						"type": "number",
						"format": "double",
						"description": "The interval in seconds for refreshing commands.",
						"example": 60
					},
					"commandRetryInterval": {
						"type": "number",
						"format": "double",
						"description": "The interval in seconds for retrying commands.",
						"example": 10
					},
					"messageRetryInterval": {
						"type": "number",
						"format": "double",
						"description": "The interval in seconds for retrying messages.",
						"example": 10
					},
					"commandPermissions": {
						"properties": {
							"setpoint": {
								"type": "boolean",
								"description": "Permission to apply setpoints.",
								"example": true
							},
							"testNorthConnection": {
								"type": "boolean",
								"description": "Permission to test a north connection.",
								"example": true
							},
							"deleteNorth": {
								"type": "boolean",
								"description": "Permission to delete a north connector.",
								"example": true
							},
							"updateNorth": {
								"type": "boolean",
								"description": "Permission to update a north connector.",
								"example": true
							},
							"createNorth": {
								"type": "boolean",
								"description": "Permission to create a north connector.",
								"example": true
							},
							"testSouthItem": {
								"type": "boolean",
								"description": "Permission to test a south item.",
								"example": true
							},
							"testSouthConnection": {
								"type": "boolean",
								"description": "Permission to test a south connection.",
								"example": true
							},
							"createOrUpdateSouthItemsFromCsv": {
								"type": "boolean",
								"description": "Permission to create or update south items from CSV.",
								"example": true
							},
							"deleteSouth": {
								"type": "boolean",
								"description": "Permission to delete a south connector.",
								"example": true
							},
							"updateSouth": {
								"type": "boolean",
								"description": "Permission to update a south connector.",
								"example": true
							},
							"createSouth": {
								"type": "boolean",
								"description": "Permission to create a south connector.",
								"example": true
							},
							"testHistorySouthItem": {
								"type": "boolean",
								"description": "Permission to test a history south item.",
								"example": true
							},
							"testHistorySouthConnection": {
								"type": "boolean",
								"description": "Permission to test a history south connection.",
								"example": true
							},
							"testHistoryNorthConnection": {
								"type": "boolean",
								"description": "Permission to test a history north connection.",
								"example": true
							},
							"createOrUpdateHistoryItemsFromCsv": {
								"type": "boolean",
								"description": "Permission to create or update history items from CSV.",
								"example": true
							},
							"deleteHistoryQuery": {
								"type": "boolean",
								"description": "Permission to delete a history query.",
								"example": true
							},
							"updateHistoryQuery": {
								"type": "boolean",
								"description": "Permission to update a history query.",
								"example": true
							},
							"createHistoryQuery": {
								"type": "boolean",
								"description": "Permission to create a history query.",
								"example": true
							},
							"deleteCertificate": {
								"type": "boolean",
								"description": "Permission to delete a certificate.",
								"example": true
							},
							"updateCertificate": {
								"type": "boolean",
								"description": "Permission to update a certificate.",
								"example": true
							},
							"createCertificate": {
								"type": "boolean",
								"description": "Permission to create a certificate.",
								"example": true
							},
							"deleteIpFilter": {
								"type": "boolean",
								"description": "Permission to delete an IP filter.",
								"example": true
							},
							"updateIpFilter": {
								"type": "boolean",
								"description": "Permission to update an IP filter.",
								"example": true
							},
							"createIpFilter": {
								"type": "boolean",
								"description": "Permission to create an IP filter.",
								"example": true
							},
							"deleteScanMode": {
								"type": "boolean",
								"description": "Permission to delete a scan mode.",
								"example": true
							},
							"updateScanMode": {
								"type": "boolean",
								"description": "Permission to update a scan mode.",
								"example": true
							},
							"createScanMode": {
								"type": "boolean",
								"description": "Permission to create a scan mode.",
								"example": true
							},
							"updateRegistrationSettings": {
								"type": "boolean",
								"description": "Permission to update registration settings.",
								"example": true
							},
							"updateEngineSettings": {
								"type": "boolean",
								"description": "Permission to update engine settings.",
								"example": true
							},
							"regenerateCipherKeys": {
								"type": "boolean",
								"description": "Permission to regenerate cipher keys.",
								"example": true
							},
							"restartEngine": {
								"type": "boolean",
								"description": "Permission to restart the engine.",
								"example": true
							},
							"updateVersion": {
								"type": "boolean",
								"description": "Permission to update the engine version.",
								"example": true
							}
						},
						"required": [
							"setpoint",
							"testNorthConnection",
							"deleteNorth",
							"updateNorth",
							"createNorth",
							"testSouthItem",
							"testSouthConnection",
							"createOrUpdateSouthItemsFromCsv",
							"deleteSouth",
							"updateSouth",
							"createSouth",
							"testHistorySouthItem",
							"testHistorySouthConnection",
							"testHistoryNorthConnection",
							"createOrUpdateHistoryItemsFromCsv",
							"deleteHistoryQuery",
							"updateHistoryQuery",
							"createHistoryQuery",
							"deleteCertificate",
							"updateCertificate",
							"createCertificate",
							"deleteIpFilter",
							"updateIpFilter",
							"createIpFilter",
							"deleteScanMode",
							"updateScanMode",
							"createScanMode",
							"updateRegistrationSettings",
							"updateEngineSettings",
							"regenerateCipherKeys",
							"restartEngine",
							"updateVersion"
						],
						"type": "object",
						"description": "Permissions for various commands."
					}
				},
				"required": [
					"host",
					"useProxy",
					"proxyUrl",
					"proxyUsername",
					"proxyPassword",
					"acceptUnauthorized",
					"commandRefreshInterval",
					"commandRetryInterval",
					"messageRetryInterval",
					"commandPermissions"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"host": "https://registration.example.com",
					"useProxy": false,
					"proxyUrl": null,
					"proxyUsername": null,
					"proxyPassword": null,
					"acceptUnauthorized": false,
					"commandRefreshInterval": 60,
					"commandRetryInterval": 10,
					"messageRetryInterval": 10,
					"commandPermissions": {
						"updateVersion": true,
						"restartEngine": true,
						"regenerateCipherKeys": true,
						"updateEngineSettings": true,
						"updateRegistrationSettings": true,
						"createScanMode": true,
						"updateScanMode": true,
						"deleteScanMode": true,
						"createIpFilter": true,
						"updateIpFilter": true,
						"deleteIpFilter": true,
						"createCertificate": true,
						"updateCertificate": true,
						"deleteCertificate": true,
						"createHistoryQuery": true,
						"updateHistoryQuery": true,
						"deleteHistoryQuery": true,
						"createOrUpdateHistoryItemsFromCsv": true,
						"testHistoryNorthConnection": true,
						"testHistorySouthConnection": true,
						"testHistorySouthItem": true,
						"createSouth": true,
						"updateSouth": true,
						"deleteSouth": true,
						"createOrUpdateSouthItemsFromCsv": true,
						"testSouthConnection": true,
						"testSouthItem": true,
						"createNorth": true,
						"updateNorth": true,
						"deleteNorth": true,
						"testNorthConnection": true,
						"setpoint": true
					}
				}
			},
			"OIBusCommandType": {
				"type": "string",
				"enum": [
					"setpoint",
					"update-version",
					"restart-engine",
					"regenerate-cipher-keys",
					"update-engine-settings",
					"update-registration-settings",
					"create-scan-mode",
					"update-scan-mode",
					"delete-scan-mode",
					"create-ip-filter",
					"update-ip-filter",
					"delete-ip-filter",
					"create-certificate",
					"update-certificate",
					"delete-certificate",
					"create-south",
					"update-south",
					"delete-south",
					"test-south-connection",
					"test-south-item",
					"create-north",
					"update-north",
					"delete-north",
					"test-north-connection",
					"create-or-update-south-items-from-csv",
					"create-history-query",
					"update-history-query",
					"delete-history-query",
					"test-history-query-north-connection",
					"test-history-query-south-connection",
					"test-history-query-south-item",
					"create-or-update-history-query-south-items-from-csv",
					"update-history-query-status"
				],
				"description": "Type representing an OIBus command type."
			},
			"OIBusCommandStatus": {
				"type": "string",
				"enum": [
					"RETRIEVED",
					"RUNNING",
					"ERRORED",
					"CANCELLED",
					"COMPLETED"
				],
				"description": "Type representing an OIBus command status."
			},
			"OIBusUpdateVersionCommandDTO": {
				"description": "Command DTO for updating the OIBus version.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-version"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"commandContent": {
						"properties": {
							"backupFolders": {
								"type": "string",
								"description": "The folders to back up before updating.",
								"example": "/backup"
							},
							"updateLauncher": {
								"type": "boolean",
								"description": "Whether to update the launcher.",
								"example": true
							},
							"assetId": {
								"type": "string",
								"description": "The asset ID for the update.",
								"example": "asset123"
							},
							"version": {
								"type": "string",
								"description": "The version to update to.",
								"example": "3.7.0"
							}
						},
						"required": [
							"backupFolders",
							"updateLauncher",
							"assetId",
							"version"
						],
						"type": "object",
						"description": "The content of the command, including version details and update options."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "update-version",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"commandContent": {
						"version": "3.7.0",
						"assetId": "asset123",
						"updateLauncher": true,
						"backupFolders": "/backup"
					}
				}
			},
			"OIBusRegenerateCipherKeysCommandDTO": {
				"description": "Command DTO for regenerating cipher keys.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"regenerate-cipher-keys"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "regenerate-cipher-keys",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0"
				}
			},
			"OIBusRestartEngineCommandDTO": {
				"description": "Command DTO for restarting the engine.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"restart-engine"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "restart-engine",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0"
				}
			},
			"LogLevel": {
				"type": "string",
				"enum": [
					"silent",
					"error",
					"warn",
					"info",
					"debug",
					"trace"
				],
				"description": "Type representing a log level."
			},
			"EngineSettingsCommandDTO": {
				"description": "Engine settings command Data Transfer Object.\nUsed as the request body for updating engine settings.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the engine.",
						"example": "OIBus OT"
					},
					"port": {
						"type": "number",
						"format": "double",
						"description": "The port on which the engine listens.",
						"example": 8080
					},
					"proxyEnabled": {
						"type": "boolean",
						"description": "Whether the proxy is enabled.",
						"example": false
					},
					"proxyPort": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The port for the proxy, if enabled.",
						"example": null
					},
					"logParameters": {
						"properties": {
							"oia": {
								"properties": {
									"interval": {
										"type": "number",
										"format": "double",
										"description": "The interval in seconds for sending logs to OIA.",
										"example": 60
									},
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for OIA output.",
										"example": "info"
									}
								},
								"required": [
									"interval",
									"level"
								],
								"type": "object",
								"description": "OIA logging configuration."
							},
							"loki": {
								"properties": {
									"password": {
										"type": "string",
										"description": "The password for Loki authentication.",
										"example": "pass"
									},
									"username": {
										"type": "string",
										"description": "The username for Loki authentication.",
										"example": "user"
									},
									"address": {
										"type": "string",
										"description": "The address of the Loki server.",
										"example": "http://loki:3100"
									},
									"interval": {
										"type": "number",
										"format": "double",
										"description": "The interval in seconds for sending logs to Loki.",
										"example": 60
									},
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for Loki output.",
										"example": "error"
									}
								},
								"required": [
									"password",
									"username",
									"address",
									"interval",
									"level"
								],
								"type": "object",
								"description": "Loki logging configuration."
							},
							"database": {
								"properties": {
									"maxNumberOfLogs": {
										"type": "number",
										"format": "double",
										"description": "The maximum number of logs to keep in the database.",
										"example": 10000
									},
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for database output.",
										"example": "warn"
									}
								},
								"required": [
									"maxNumberOfLogs",
									"level"
								],
								"type": "object",
								"description": "Database logging configuration."
							},
							"file": {
								"properties": {
									"numberOfFiles": {
										"type": "number",
										"format": "double",
										"description": "The number of log files to keep.",
										"example": 5
									},
									"maxFileSize": {
										"type": "number",
										"format": "double",
										"description": "The maximum size of a log file in bytes.",
										"example": 10485760
									},
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for file output.",
										"example": "debug"
									}
								},
								"required": [
									"numberOfFiles",
									"maxFileSize",
									"level"
								],
								"type": "object",
								"description": "File logging configuration."
							},
							"console": {
								"properties": {
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for console output.",
										"example": "info"
									}
								},
								"required": [
									"level"
								],
								"type": "object",
								"description": "Console logging configuration."
							}
						},
						"required": [
							"oia",
							"loki",
							"database",
							"file",
							"console"
						],
						"type": "object",
						"description": "Logging parameters for different outputs."
					}
				},
				"required": [
					"name",
					"port",
					"proxyEnabled",
					"proxyPort",
					"logParameters"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"name": "OIBus OT",
					"port": 8080,
					"proxyEnabled": false,
					"proxyPort": null,
					"logParameters": {
						"console": {
							"level": "info"
						},
						"file": {
							"level": "debug",
							"maxFileSize": 10485760,
							"numberOfFiles": 5
						},
						"database": {
							"level": "warn",
							"maxNumberOfLogs": 10000
						},
						"loki": {
							"level": "error",
							"interval": 60,
							"address": "http://loki:3100",
							"username": "user",
							"password": "pass"
						},
						"oia": {
							"level": "info",
							"interval": 60
						}
					}
				}
			},
			"OIBusUpdateEngineSettingsCommandDTO": {
				"description": "Command DTO for updating engine settings.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-engine-settings"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"commandContent": {
						"$ref": "#/components/schemas/EngineSettingsCommandDTO",
						"description": "The content of the command, including engine settings."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "update-engine-settings",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"commandContent": {
						"name": "Engine 1",
						"port": 8080,
						"proxyEnabled": false,
						"proxyPort": null,
						"logParameters": {
							"console": {
								"level": "info"
							},
							"file": {
								"level": "debug",
								"maxFileSize": 10485760,
								"numberOfFiles": 5
							},
							"database": {
								"level": "warn",
								"maxNumberOfLogs": 10000
							},
							"loki": {
								"level": "error",
								"interval": 60,
								"address": "http://loki:3100",
								"username": "user",
								"password": "pass"
							},
							"oia": {
								"level": "info",
								"interval": 60
							}
						}
					}
				}
			},
			"OIBusUpdateRegistrationSettingsCommandDTO": {
				"description": "Command DTO for updating registration settings.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-registration-settings"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"commandContent": {
						"properties": {
							"messageRetryInterval": {
								"type": "number",
								"format": "double",
								"description": "The interval in seconds for retrying messages.",
								"example": 10
							},
							"commandRetryInterval": {
								"type": "number",
								"format": "double",
								"description": "The interval in seconds for retrying commands.",
								"example": 10
							},
							"commandRefreshInterval": {
								"type": "number",
								"format": "double",
								"description": "The interval in seconds for refreshing commands.",
								"example": 60
							}
						},
						"required": [
							"messageRetryInterval",
							"commandRetryInterval",
							"commandRefreshInterval"
						],
						"type": "object",
						"description": "The content of the command, including registration settings."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "update-registration-settings",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"commandContent": {
						"commandRefreshInterval": 60,
						"commandRetryInterval": 10,
						"messageRetryInterval": 10
					}
				}
			},
			"OIBusCreateScanModeCommandDTO": {
				"description": "Command DTO for creating a scan mode.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"create-scan-mode"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"commandContent": {
						"$ref": "#/components/schemas/ScanModeCommandDTO",
						"description": "The content of the command, including scan mode details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "create-scan-mode",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"commandContent": {
						"name": "Daily Scan",
						"description": "Scans for new data every day at midnight",
						"cron": "0 0 * * *"
					}
				}
			},
			"OIBusUpdateScanModeCommandDTO": {
				"description": "Command DTO for updating a scan mode.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-scan-mode"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"scanModeId": {
						"type": "string",
						"description": "The ID of the scan mode to update.",
						"example": "scan123"
					},
					"commandContent": {
						"$ref": "#/components/schemas/ScanModeCommandDTO",
						"description": "The content of the command, including updated scan mode details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"scanModeId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "update-scan-mode",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"scanModeId": "scan123",
					"commandContent": {
						"name": "Daily Scan",
						"description": "Scans for new data every day at midnight",
						"cron": "0 0 * * *"
					}
				}
			},
			"OIBusDeleteScanModeCommandDTO": {
				"description": "Command DTO for deleting a scan mode.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"delete-scan-mode"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"scanModeId": {
						"type": "string",
						"description": "The ID of the scan mode to delete.",
						"example": "scan123"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"scanModeId"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "delete-scan-mode",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"scanModeId": "scan123"
				}
			},
			"IPFilterCommandDTO": {
				"description": "Command DTO for creating or updating an IP filter.\nUsed as the request body for IP filter creation/update endpoints.",
				"properties": {
					"address": {
						"type": "string",
						"description": "The IP address or CIDR block to filter.\nCan be an IPv4 address, IPv6 address, or CIDR notation.",
						"example": "192.168.1.1"
					},
					"description": {
						"type": "string",
						"description": "A description of the purpose or reason for this IP filter.",
						"example": "Allow traffic from the local admin workstation"
					}
				},
				"required": [
					"address",
					"description"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"address": "192.168.1.1",
					"description": "Allow traffic from the local admin workstation"
				}
			},
			"OIBusCreateIPFilterCommandDTO": {
				"description": "Command DTO for creating an IP filter.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"create-ip-filter"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"commandContent": {
						"$ref": "#/components/schemas/IPFilterCommandDTO",
						"description": "The content of the command, including IP filter details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "create-ip-filter",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"commandContent": {
						"address": "192.168.1.1",
						"description": "Allow traffic from the local admin workstation"
					}
				}
			},
			"OIBusUpdateIPFilterCommandDTO": {
				"description": "Command DTO for updating an IP filter.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-ip-filter"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"ipFilterId": {
						"type": "string",
						"description": "The ID of the IP filter to update.",
						"example": "filter123"
					},
					"commandContent": {
						"$ref": "#/components/schemas/IPFilterCommandDTO",
						"description": "The content of the command, including updated IP filter details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"ipFilterId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "update-ip-filter",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"ipFilterId": "filter123",
					"commandContent": {
						"address": "192.168.1.1",
						"description": "Allow traffic from the local admin workstation"
					}
				}
			},
			"OIBusDeleteIPFilterCommandDTO": {
				"description": "Command DTO for deleting an IP filter.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"delete-ip-filter"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"ipFilterId": {
						"type": "string",
						"description": "The ID of the IP filter to delete.",
						"example": "filter123"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"ipFilterId"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "delete-ip-filter",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"ipFilterId": "filter123"
				}
			},
			"CertificateOptions": {
				"description": "Options for generating a certificate.\nUsed to specify details for certificate generation.",
				"properties": {
					"commonName": {
						"type": "string",
						"description": "The common name (e.g., domain name) for the certificate.",
						"example": "example.com"
					},
					"countryName": {
						"type": "string",
						"description": "The country name for the certificate.",
						"example": "US"
					},
					"stateOrProvinceName": {
						"type": "string",
						"description": "The state or province name for the certificate.",
						"example": "California"
					},
					"localityName": {
						"type": "string",
						"description": "The locality (e.g., city) name for the certificate.",
						"example": "San Francisco"
					},
					"organizationName": {
						"type": "string",
						"description": "The organization name for the certificate.",
						"example": "Example Inc."
					},
					"keySize": {
						"type": "number",
						"format": "double",
						"description": "The key size in bits for the certificate.",
						"example": 2048
					},
					"daysBeforeExpiry": {
						"type": "number",
						"format": "double",
						"description": "The number of days before the certificate expires.",
						"example": 365
					}
				},
				"required": [
					"commonName",
					"countryName",
					"stateOrProvinceName",
					"localityName",
					"organizationName",
					"keySize",
					"daysBeforeExpiry"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"commonName": "example.com",
					"countryName": "US",
					"stateOrProvinceName": "California",
					"localityName": "San Francisco",
					"organizationName": "Example Inc.",
					"keySize": 2048,
					"daysBeforeExpiry": 365
				}
			},
			"CertificateCommandDTO": {
				"description": "Command DTO for creating or updating a certificate.\nUsed as the request body for certificate creation/update endpoints.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the certificate.",
						"example": "New Server SSL Certificate"
					},
					"description": {
						"type": "string",
						"description": "A description of the certificate's purpose or usage.",
						"example": "New SSL certificate for securing server communications"
					},
					"regenerateCertificate": {
						"type": "boolean",
						"description": "Whether to regenerate the certificate.",
						"example": false
					},
					"options": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CertificateOptions"
							}
						],
						"nullable": true,
						"description": "Options for generating the certificate.\nSet to `null` to not regenerate certificate",
						"example": {
							"commonName": "example.com",
							"countryName": "US",
							"stateOrProvinceName": "California",
							"localityName": "San Francisco",
							"organizationName": "Example Inc.",
							"keySize": 2048,
							"daysBeforeExpiry": 365
						}
					}
				},
				"required": [
					"name",
					"description",
					"regenerateCertificate",
					"options"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"name": "New Server SSL Certificate",
					"description": "New SSL certificate for securing server communications",
					"regenerateCertificate": false,
					"options": {
						"commonName": "example.com",
						"countryName": "US",
						"stateOrProvinceName": "California",
						"localityName": "San Francisco",
						"organizationName": "Example Inc.",
						"keySize": 2048,
						"daysBeforeExpiry": 365
					}
				}
			},
			"OIBusCreateCertificateCommandDTO": {
				"description": "Command DTO for creating a certificate.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"create-certificate"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"commandContent": {
						"$ref": "#/components/schemas/CertificateCommandDTO",
						"description": "The content of the command, including certificate details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "create-certificate",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"commandContent": {
						"name": "Server SSL Certificate",
						"description": "SSL certificate for securing server communications",
						"regenerateCertificate": false,
						"options": {
							"commonName": "example.com",
							"countryName": "US",
							"stateOrProvinceName": "California",
							"localityName": "San Francisco",
							"organizationName": "Example Inc.",
							"keySize": 2048,
							"daysBeforeExpiry": 365
						}
					}
				}
			},
			"OIBusUpdateCertificateCommandDTO": {
				"description": "Command DTO for updating a certificate.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-certificate"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"certificateId": {
						"type": "string",
						"description": "The ID of the certificate to update.",
						"example": "cert123"
					},
					"commandContent": {
						"$ref": "#/components/schemas/CertificateCommandDTO",
						"description": "The content of the command, including updated certificate details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"certificateId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "update-certificate",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"certificateId": "cert123",
					"commandContent": {
						"name": "Server SSL Certificate",
						"description": "SSL certificate for securing server communications",
						"regenerateCertificate": false,
						"options": {
							"commonName": "example.com",
							"countryName": "US",
							"stateOrProvinceName": "California",
							"localityName": "San Francisco",
							"organizationName": "Example Inc.",
							"keySize": 2048,
							"daysBeforeExpiry": 365
						}
					}
				}
			},
			"OIBusDeleteCertificateCommandDTO": {
				"description": "Command DTO for deleting a certificate.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"delete-certificate"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"certificateId": {
						"type": "string",
						"description": "The ID of the certificate to delete.",
						"example": "cert123"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"certificateId"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "delete-certificate",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"certificateId": "cert123"
				}
			},
			"OIBusCreateSouthConnectorCommandDTO": {
				"description": "Command DTO for creating a south connector.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"create-south"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"commandContent": {
						"$ref": "#/components/schemas/SouthConnectorCommandDTO_SouthSettings.SouthItemSettings_",
						"description": "The content of the command, including south connector details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusUpdateSouthConnectorCommandDTO": {
				"description": "Command DTO for updating a south connector.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-south"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"southConnectorId": {
						"type": "string",
						"description": "The ID of the south connector to update.",
						"example": "south123"
					},
					"commandContent": {
						"$ref": "#/components/schemas/SouthConnectorCommandDTO_SouthSettings.SouthItemSettings_",
						"description": "The content of the command, including updated south connector details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"southConnectorId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusDeleteSouthConnectorCommandDTO": {
				"description": "Command DTO for deleting a south connector.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"delete-south"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"southConnectorId": {
						"type": "string",
						"description": "The ID of the south connector to delete.",
						"example": "south123"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"southConnectorId"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "delete-south",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"southConnectorId": "south123"
				}
			},
			"OIBusTestSouthConnectorCommandDTO": {
				"description": "Command DTO for testing a south connector connection.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"test-south-connection"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"southConnectorId": {
						"type": "string",
						"description": "The ID of the south connector to test.",
						"example": "south123"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"southConnectorId"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "test-south-connection",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"southConnectorId": "south123"
				}
			},
			"OIBusTestSouthConnectorItemCommandDTO": {
				"description": "Command DTO for testing a south connector item.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"test-south-item"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"southConnectorId": {
						"type": "string",
						"description": "The ID of the south connector.",
						"example": "south123"
					},
					"itemId": {
						"type": "string",
						"description": "The ID of the item to test.",
						"example": "item456"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"southConnectorId",
					"itemId"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "test-south-item",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"southConnectorId": "south123",
					"itemId": "item456"
				}
			},
			"OIBusNorthType": {
				"type": "string",
				"enum": [
					"modbus",
					"mqtt",
					"oianalytics",
					"opcua",
					"sftp",
					"azure-blob",
					"aws-s3",
					"console",
					"file-writer",
					"rest"
				]
			},
			"NorthAmazonS3Settings": {
				"properties": {
					"bucket": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"accessKey": {
						"type": "string"
					},
					"secretKey": {
						"type": "string",
						"nullable": true
					},
					"useProxy": {
						"type": "boolean"
					},
					"proxyUrl": {
						"type": "string",
						"nullable": true
					},
					"proxyUsername": {
						"type": "string",
						"nullable": true
					},
					"proxyPassword": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"bucket",
					"region",
					"folder",
					"accessKey",
					"secretKey",
					"useProxy"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthAzureBlobSettingsAuthentication": {
				"type": "string",
				"enum": [
					"access-key",
					"sas-token",
					"aad",
					"external"
				]
			},
			"NorthAzureBlobSettings": {
				"properties": {
					"useADLS": {
						"type": "boolean"
					},
					"useCustomUrl": {
						"type": "boolean"
					},
					"account": {
						"type": "string"
					},
					"customUrl": {
						"type": "string"
					},
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"authentication": {
						"$ref": "#/components/schemas/NorthAzureBlobSettingsAuthentication"
					},
					"accessKey": {
						"type": "string",
						"nullable": true
					},
					"sasToken": {
						"type": "string",
						"nullable": true
					},
					"tenantId": {
						"type": "string",
						"nullable": true
					},
					"clientId": {
						"type": "string",
						"nullable": true
					},
					"clientSecret": {
						"type": "string",
						"nullable": true
					},
					"useProxy": {
						"type": "boolean"
					},
					"proxyUrl": {
						"type": "string"
					},
					"proxyUsername": {
						"type": "string",
						"nullable": true
					},
					"proxyPassword": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"useADLS",
					"useCustomUrl",
					"container",
					"path",
					"authentication",
					"useProxy"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthConsoleSettings": {
				"properties": {
					"verbose": {
						"type": "boolean"
					}
				},
				"required": [
					"verbose"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthFileWriterSettings": {
				"properties": {
					"outputFolder": {
						"type": "string"
					},
					"prefix": {
						"type": "string",
						"nullable": true
					},
					"suffix": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"outputFolder",
					"prefix",
					"suffix"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthModbusSettingsAddressOffset": {
				"type": "string",
				"enum": [
					"modbus",
					"jbus"
				]
			},
			"NorthModbusSettingsEndianness": {
				"type": "string",
				"enum": [
					"big-endian",
					"little-endian"
				]
			},
			"NorthModbusSettings": {
				"properties": {
					"host": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"retryInterval": {
						"type": "number",
						"format": "double"
					},
					"slaveId": {
						"type": "number",
						"format": "double"
					},
					"addressOffset": {
						"$ref": "#/components/schemas/NorthModbusSettingsAddressOffset"
					},
					"endianness": {
						"$ref": "#/components/schemas/NorthModbusSettingsEndianness"
					},
					"swapBytesInWords": {
						"type": "boolean"
					},
					"swapWordsInDWords": {
						"type": "boolean"
					}
				},
				"required": [
					"host",
					"port",
					"retryInterval",
					"slaveId",
					"addressOffset",
					"endianness",
					"swapBytesInWords",
					"swapWordsInDWords"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthMQTTSettingsQos": {
				"type": "string",
				"enum": [
					"0",
					"1",
					"2"
				]
			},
			"NorthMQTTSettingsAuthenticationType": {
				"type": "string",
				"enum": [
					"none",
					"basic",
					"cert"
				]
			},
			"NorthMQTTSettingsAuthentication": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/NorthMQTTSettingsAuthenticationType"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string",
						"nullable": true
					},
					"certFilePath": {
						"type": "string"
					},
					"keyFilePath": {
						"type": "string"
					},
					"caFilePath": {
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthMQTTSettings": {
				"properties": {
					"url": {
						"type": "string"
					},
					"qos": {
						"$ref": "#/components/schemas/NorthMQTTSettingsQos"
					},
					"persistent": {
						"type": "boolean"
					},
					"authentication": {
						"$ref": "#/components/schemas/NorthMQTTSettingsAuthentication"
					},
					"rejectUnauthorized": {
						"type": "boolean"
					},
					"reconnectPeriod": {
						"type": "number",
						"format": "double"
					},
					"connectTimeout": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"url",
					"qos",
					"authentication",
					"rejectUnauthorized",
					"reconnectPeriod",
					"connectTimeout"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthOIAnalyticsSettingsSpecificSettingsAuthentication": {
				"type": "string",
				"enum": [
					"basic",
					"aad-client-secret",
					"aad-certificate"
				]
			},
			"NorthOIAnalyticsSettingsSpecificSettings": {
				"properties": {
					"host": {
						"type": "string"
					},
					"acceptUnauthorized": {
						"type": "boolean"
					},
					"authentication": {
						"$ref": "#/components/schemas/NorthOIAnalyticsSettingsSpecificSettingsAuthentication"
					},
					"accessKey": {
						"type": "string"
					},
					"secretKey": {
						"type": "string",
						"nullable": true
					},
					"tenantId": {
						"type": "string",
						"nullable": true
					},
					"clientId": {
						"type": "string"
					},
					"clientSecret": {
						"type": "string",
						"nullable": true
					},
					"certificateId": {
						"type": "string",
						"nullable": true
					},
					"scope": {
						"type": "string",
						"nullable": true
					},
					"useProxy": {
						"type": "boolean"
					},
					"proxyUrl": {
						"type": "string"
					},
					"proxyUsername": {
						"type": "string",
						"nullable": true
					},
					"proxyPassword": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"host",
					"acceptUnauthorized",
					"authentication",
					"useProxy"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthOIAnalyticsSettings": {
				"properties": {
					"useOiaModule": {
						"type": "boolean"
					},
					"timeout": {
						"type": "number",
						"format": "double"
					},
					"compress": {
						"type": "boolean"
					},
					"specificSettings": {
						"allOf": [
							{
								"$ref": "#/components/schemas/NorthOIAnalyticsSettingsSpecificSettings"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"useOiaModule",
					"timeout",
					"compress"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthOPCUASettingsSecurityMode": {
				"type": "string",
				"enum": [
					"none",
					"sign",
					"sign-and-encrypt"
				]
			},
			"NorthOPCUASettingsSecurityPolicy": {
				"type": "string",
				"enum": [
					"none",
					"basic128",
					"basic192",
					"basic192-rsa15",
					"basic256-rsa15",
					"basic256-sha256",
					"aes128-sha256-rsa-oaep",
					"pub-sub-aes-128-ctr",
					"pub-sub-aes-256-ctr"
				]
			},
			"NorthOPCUASettingsAuthenticationType": {
				"type": "string",
				"enum": [
					"none",
					"basic",
					"cert"
				]
			},
			"NorthOPCUASettingsAuthentication": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/NorthOPCUASettingsAuthenticationType"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string",
						"nullable": true
					},
					"certFilePath": {
						"type": "string"
					},
					"keyFilePath": {
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthOPCUASettings": {
				"properties": {
					"url": {
						"type": "string"
					},
					"keepSessionAlive": {
						"type": "boolean"
					},
					"retryInterval": {
						"type": "number",
						"format": "double"
					},
					"securityMode": {
						"$ref": "#/components/schemas/NorthOPCUASettingsSecurityMode"
					},
					"securityPolicy": {
						"$ref": "#/components/schemas/NorthOPCUASettingsSecurityPolicy"
					},
					"authentication": {
						"$ref": "#/components/schemas/NorthOPCUASettingsAuthentication"
					}
				},
				"required": [
					"url",
					"keepSessionAlive",
					"retryInterval",
					"securityMode",
					"authentication"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthRESTSettingsAuthType": {
				"type": "string",
				"enum": [
					"basic",
					"bearer"
				]
			},
			"NorthRESTSettingsQueryParams": {
				"properties": {
					"key": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"key",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthRESTSettings": {
				"properties": {
					"host": {
						"type": "string"
					},
					"acceptUnauthorized": {
						"type": "boolean"
					},
					"endpoint": {
						"type": "string"
					},
					"testPath": {
						"type": "string"
					},
					"timeout": {
						"type": "number",
						"format": "double"
					},
					"authType": {
						"$ref": "#/components/schemas/NorthRESTSettingsAuthType"
					},
					"bearerAuthToken": {
						"type": "string",
						"nullable": true
					},
					"basicAuthUsername": {
						"type": "string"
					},
					"basicAuthPassword": {
						"type": "string",
						"nullable": true
					},
					"queryParams": {
						"items": {
							"$ref": "#/components/schemas/NorthRESTSettingsQueryParams"
						},
						"type": "array",
						"nullable": true
					},
					"useProxy": {
						"type": "boolean"
					},
					"proxyUrl": {
						"type": "string"
					},
					"proxyUsername": {
						"type": "string",
						"nullable": true
					},
					"proxyPassword": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"host",
					"acceptUnauthorized",
					"endpoint",
					"testPath",
					"timeout",
					"authType",
					"queryParams",
					"useProxy"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthSFTPSettingsAuthentication": {
				"type": "string",
				"enum": [
					"password",
					"private-key"
				]
			},
			"NorthSFTPSettings": {
				"properties": {
					"host": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"authentication": {
						"$ref": "#/components/schemas/NorthSFTPSettingsAuthentication"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string",
						"nullable": true
					},
					"privateKey": {
						"type": "string"
					},
					"passphrase": {
						"type": "string",
						"nullable": true
					},
					"remoteFolder": {
						"type": "string"
					},
					"prefix": {
						"type": "string",
						"nullable": true
					},
					"suffix": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"host",
					"port",
					"authentication",
					"username",
					"remoteFolder",
					"prefix",
					"suffix"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthSettings": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/NorthAmazonS3Settings"
					},
					{
						"$ref": "#/components/schemas/NorthAzureBlobSettings"
					},
					{
						"$ref": "#/components/schemas/NorthConsoleSettings"
					},
					{
						"$ref": "#/components/schemas/NorthFileWriterSettings"
					},
					{
						"$ref": "#/components/schemas/NorthModbusSettings"
					},
					{
						"$ref": "#/components/schemas/NorthMQTTSettings"
					},
					{
						"$ref": "#/components/schemas/NorthOIAnalyticsSettings"
					},
					{
						"$ref": "#/components/schemas/NorthOPCUASettings"
					},
					{
						"$ref": "#/components/schemas/NorthRESTSettings"
					},
					{
						"$ref": "#/components/schemas/NorthSFTPSettings"
					}
				]
			},
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"TransformerIdWithOptions": {
				"description": "Data Transfer Object for referencing a transformer by ID with its options.\nUsed when only the transformer ID is needed along with configuration options.",
				"properties": {
					"inputType": {
						"type": "string",
						"description": "The input data type that the transformer accepts.",
						"example": "string"
					},
					"transformerId": {
						"type": "string",
						"description": "The unique identifier of the transformer to be applied.",
						"example": "customTransformer123"
					},
					"options": {
						"$ref": "#/components/schemas/Record_string.unknown_",
						"description": "Configuration options for the transformer.",
						"example": {
							"precision": 2,
							"defaultValue": 0
						}
					}
				},
				"required": [
					"inputType",
					"transformerId",
					"options"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"inputType": "string",
					"transformerId": "customTransformer123",
					"options": {
						"precision": 2,
						"defaultValue": 0
					}
				}
			},
			"NorthConnectorCommandDTO_NorthSettings_": {
				"properties": {
					"name": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/OIBusNorthType"
					},
					"description": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"settings": {
						"$ref": "#/components/schemas/NorthSettings"
					},
					"caching": {
						"properties": {
							"archive": {
								"properties": {
									"retentionDuration": {
										"type": "number",
										"format": "double"
									},
									"enabled": {
										"type": "boolean"
									}
								},
								"required": [
									"retentionDuration",
									"enabled"
								],
								"type": "object"
							},
							"error": {
								"properties": {
									"retentionDuration": {
										"type": "number",
										"format": "double"
									},
									"retryCount": {
										"type": "number",
										"format": "double"
									},
									"retryInterval": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"retentionDuration",
									"retryCount",
									"retryInterval"
								],
								"type": "object"
							},
							"throttling": {
								"properties": {
									"maxNumberOfElements": {
										"type": "number",
										"format": "double"
									},
									"maxSize": {
										"type": "number",
										"format": "double"
									},
									"runMinDelay": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"maxNumberOfElements",
									"maxSize",
									"runMinDelay"
								],
								"type": "object"
							},
							"trigger": {
								"properties": {
									"numberOfFiles": {
										"type": "number",
										"format": "double"
									},
									"numberOfElements": {
										"type": "number",
										"format": "double"
									},
									"scanModeName": {
										"type": "string",
										"nullable": true
									},
									"scanModeId": {
										"type": "string"
									}
								},
								"required": [
									"numberOfFiles",
									"numberOfElements",
									"scanModeName",
									"scanModeId"
								],
								"type": "object"
							}
						},
						"required": [
							"archive",
							"error",
							"throttling",
							"trigger"
						],
						"type": "object"
					},
					"subscriptions": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"transformers": {
						"items": {
							"$ref": "#/components/schemas/TransformerIdWithOptions"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"type",
					"description",
					"enabled",
					"settings",
					"caching",
					"subscriptions",
					"transformers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusCreateNorthConnectorCommandDTO": {
				"description": "Command DTO for creating a north connector.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"create-north"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"commandContent": {
						"$ref": "#/components/schemas/NorthConnectorCommandDTO_NorthSettings_",
						"description": "The content of the command, including north connector details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusUpdateNorthConnectorCommandDTO": {
				"description": "Command DTO for updating a north connector.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-north"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"northConnectorId": {
						"type": "string",
						"description": "The ID of the north connector to update.",
						"example": "north123"
					},
					"commandContent": {
						"$ref": "#/components/schemas/NorthConnectorCommandDTO_NorthSettings_",
						"description": "The content of the command, including updated north connector details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"northConnectorId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusDeleteNorthConnectorCommandDTO": {
				"description": "Command DTO for deleting a north connector.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"delete-north"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"northConnectorId": {
						"type": "string",
						"description": "The ID of the north connector to delete.",
						"example": "north123"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"northConnectorId"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "delete-north",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"northConnectorId": "north123"
				}
			},
			"OIBusTestNorthConnectorCommandDTO": {
				"description": "Command DTO for testing a north connector connection.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"test-north-connection"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"northConnectorId": {
						"type": "string",
						"description": "The ID of the north connector to test.",
						"example": "north123"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"northConnectorId"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "test-north-connection",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"northConnectorId": "north123"
				}
			},
			"OIBusCreateOrUpdateSouthConnectorItemsFromCSVCommandDTO": {
				"description": "Command DTO for creating or updating south connector items from CSV.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"create-or-update-south-items-from-csv"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"southConnectorId": {
						"type": "string",
						"description": "The ID of the south connector.",
						"example": "south123"
					},
					"commandContent": {
						"properties": {
							"delimiter": {
								"type": "string",
								"description": "The delimiter used in the CSV.",
								"example": ","
							},
							"csvContent": {
								"type": "string",
								"description": "The CSV content to import.",
								"example": "id,name,address\n1,Item 1,Address 1"
							},
							"deleteItemsNotPresent": {
								"type": "boolean",
								"description": "Whether to delete items not present in the CSV.",
								"example": false
							}
						},
						"required": [
							"delimiter",
							"csvContent",
							"deleteItemsNotPresent"
						],
						"type": "object",
						"description": "The content of the command, including CSV content and options."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"southConnectorId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "create-or-update-south-items-from-csv",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"southConnectorId": "south123",
					"commandContent": {
						"deleteItemsNotPresent": false,
						"csvContent": "id,name,address\n1,Item 1,Address 1",
						"delimiter": ","
					}
				}
			},
			"HistoryQueryItemCommandDTO_SouthItemSettings_": {
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"settings": {
						"$ref": "#/components/schemas/SouthItemSettings"
					}
				},
				"required": [
					"id",
					"name",
					"enabled",
					"settings"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HistoryQueryCommandDTO_SouthSettings.NorthSettings.SouthItemSettings_": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"startTime": {
						"type": "string"
					},
					"endTime": {
						"type": "string"
					},
					"southType": {
						"$ref": "#/components/schemas/OIBusSouthType"
					},
					"northType": {
						"$ref": "#/components/schemas/OIBusNorthType"
					},
					"southSettings": {
						"$ref": "#/components/schemas/SouthSettings"
					},
					"northSettings": {
						"$ref": "#/components/schemas/NorthSettings"
					},
					"caching": {
						"properties": {
							"archive": {
								"properties": {
									"retentionDuration": {
										"type": "number",
										"format": "double"
									},
									"enabled": {
										"type": "boolean"
									}
								},
								"required": [
									"retentionDuration",
									"enabled"
								],
								"type": "object"
							},
							"error": {
								"properties": {
									"retentionDuration": {
										"type": "number",
										"format": "double"
									},
									"retryCount": {
										"type": "number",
										"format": "double"
									},
									"retryInterval": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"retentionDuration",
									"retryCount",
									"retryInterval"
								],
								"type": "object"
							},
							"throttling": {
								"properties": {
									"maxNumberOfElements": {
										"type": "number",
										"format": "double"
									},
									"maxSize": {
										"type": "number",
										"format": "double"
									},
									"runMinDelay": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"maxNumberOfElements",
									"maxSize",
									"runMinDelay"
								],
								"type": "object"
							},
							"trigger": {
								"properties": {
									"numberOfFiles": {
										"type": "number",
										"format": "double"
									},
									"numberOfElements": {
										"type": "number",
										"format": "double"
									},
									"scanModeName": {
										"type": "string",
										"nullable": true
									},
									"scanModeId": {
										"type": "string"
									}
								},
								"required": [
									"numberOfFiles",
									"numberOfElements",
									"scanModeName",
									"scanModeId"
								],
								"type": "object"
							}
						},
						"required": [
							"archive",
							"error",
							"throttling",
							"trigger"
						],
						"type": "object"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/HistoryQueryItemCommandDTO_SouthItemSettings_"
						},
						"type": "array"
					},
					"northTransformers": {
						"items": {
							"$ref": "#/components/schemas/TransformerIdWithOptions"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"description",
					"startTime",
					"endTime",
					"southType",
					"northType",
					"southSettings",
					"northSettings",
					"caching",
					"items",
					"northTransformers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusCreateHistoryQueryCommandDTO": {
				"description": "Command DTO for creating a history query.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"create-history-query"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"commandContent": {
						"$ref": "#/components/schemas/HistoryQueryCommandDTO_SouthSettings.NorthSettings.SouthItemSettings_",
						"description": "The content of the command, including history query details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusUpdateHistoryQueryCommandDTO": {
				"description": "Command DTO for updating a history query.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-history-query"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"historyQueryId": {
						"type": "string",
						"description": "The ID of the history query to update.",
						"example": "history123"
					},
					"commandContent": {
						"properties": {
							"historyQuery": {
								"$ref": "#/components/schemas/HistoryQueryCommandDTO_SouthSettings.NorthSettings.SouthItemSettings_",
								"description": "The updated history query details."
							},
							"resetCache": {
								"type": "boolean",
								"description": "Whether to reset the cache.",
								"example": false
							}
						},
						"required": [
							"historyQuery",
							"resetCache"
						],
						"type": "object",
						"description": "The content of the command, including history query update details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"historyQueryId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusDeleteHistoryQueryCommandDTO": {
				"description": "Command DTO for deleting a history query.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"delete-history-query"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"historyQueryId": {
						"type": "string",
						"description": "The ID of the history query to delete.",
						"example": "history123"
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"historyQueryId"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "delete-history-query",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"historyQueryId": "history123"
				}
			},
			"OIBusTestHistoryQueryNorthConnectionCommandDTO": {
				"description": "Command DTO for testing a history query north connection.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"test-history-query-north-connection"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"historyQueryId": {
						"type": "string",
						"description": "The ID of the history query.",
						"example": "history123"
					},
					"northConnectorId": {
						"type": "string",
						"nullable": true,
						"description": "The ID of the north connector to test. Can be `null` to use the default north connector.",
						"example": "north123"
					},
					"commandContent": {
						"$ref": "#/components/schemas/HistoryQueryCommandDTO_SouthSettings.NorthSettings.SouthItemSettings_",
						"description": "The content of the command, including history query details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"historyQueryId",
					"northConnectorId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusTestHistoryQuerySouthConnectionCommandDTO": {
				"description": "Command DTO for testing a history query south connection.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"test-history-query-south-connection"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"historyQueryId": {
						"type": "string",
						"description": "The ID of the history query.",
						"example": "history123"
					},
					"southConnectorId": {
						"type": "string",
						"nullable": true,
						"description": "The ID of the south connector to test. Can be `null` to use the default south connector.",
						"example": "south123"
					},
					"commandContent": {
						"$ref": "#/components/schemas/HistoryQueryCommandDTO_SouthSettings.NorthSettings.SouthItemSettings_",
						"description": "The content of the command, including history query details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"historyQueryId",
					"southConnectorId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusTestHistoryQuerySouthItemCommandDTO": {
				"description": "Command DTO for testing a history query south item.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"test-history-query-south-item"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"historyQueryId": {
						"type": "string",
						"description": "The ID of the history query.",
						"example": "history123"
					},
					"southConnectorId": {
						"type": "string",
						"nullable": true,
						"description": "The ID of the south connector. Can be `null` to use the default south connector.",
						"example": "south123"
					},
					"itemId": {
						"type": "string",
						"description": "The ID of the item to test.",
						"example": "item456"
					},
					"commandContent": {
						"properties": {
							"testingSettings": {
								"$ref": "#/components/schemas/SouthConnectorItemTestingSettings",
								"description": "The testing settings."
							},
							"itemCommand": {
								"$ref": "#/components/schemas/HistoryQueryItemCommandDTO_SouthItemSettings_",
								"description": "The item details."
							},
							"historyCommand": {
								"$ref": "#/components/schemas/HistoryQueryCommandDTO_SouthSettings.NorthSettings.SouthItemSettings_",
								"description": "The history query details."
							}
						},
						"required": [
							"testingSettings",
							"itemCommand",
							"historyCommand"
						],
						"type": "object",
						"description": "The content of the command, including history query, item, and testing settings."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"historyQueryId",
					"southConnectorId",
					"itemId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusCreateOrUpdateHistoryQuerySouthItemsFromCSVCommandDTO": {
				"description": "Command DTO for creating or updating history query south items from CSV.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"create-or-update-history-query-south-items-from-csv"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"historyQueryId": {
						"type": "string",
						"description": "The ID of the history query.",
						"example": "history123"
					},
					"commandContent": {
						"properties": {
							"delimiter": {
								"type": "string",
								"description": "The delimiter used in the CSV.",
								"example": ","
							},
							"csvContent": {
								"type": "string",
								"description": "The CSV content to import.",
								"example": "id,name,address\r\n1,Item 1,Address 1"
							},
							"deleteItemsNotPresent": {
								"type": "boolean",
								"description": "Whether to delete items not present in the CSV.",
								"example": false
							}
						},
						"required": [
							"delimiter",
							"csvContent",
							"deleteItemsNotPresent"
						],
						"type": "object",
						"description": "The content of the command, including CSV content and options."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"historyQueryId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "create-or-update-history-query-south-items-from-csv",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"historyQueryId": "history123",
					"commandContent": {
						"deleteItemsNotPresent": false,
						"csvContent": "id,name,address\r\n1,Item 1,Address 1",
						"delimiter": ","
					}
				}
			},
			"HistoryQueryStatus": {
				"type": "string",
				"enum": [
					"PENDING",
					"RUNNING",
					"ERRORED",
					"PAUSED",
					"FINISHED"
				]
			},
			"OIBusUpdateHistoryQueryStatusCommandDTO": {
				"description": "Command DTO for updating a history query status.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"update-history-query-status"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"historyQueryId": {
						"type": "string",
						"description": "The ID of the history query.",
						"example": "history123"
					},
					"commandContent": {
						"properties": {
							"historyQueryStatus": {
								"$ref": "#/components/schemas/HistoryQueryStatus",
								"description": "The new status of the history query.",
								"example": "RUNNING"
							}
						},
						"required": [
							"historyQueryStatus"
						],
						"type": "object",
						"description": "The content of the command, including the new history query status."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"historyQueryId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "update-history-query-status",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"historyQueryId": "history123",
					"commandContent": {
						"historyQueryStatus": "RUNNING"
					}
				}
			},
			"OIBusSetpointCommandDTO": {
				"description": "Command DTO for sending setpoints.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the command.",
						"example": "cmd123"
					},
					"type": {
						"type": "string",
						"enum": [
							"setpoint"
						],
						"nullable": false,
						"description": "The type of the command."
					},
					"status": {
						"$ref": "#/components/schemas/OIBusCommandStatus",
						"description": "The current status of the command.",
						"example": "COMPLETED"
					},
					"ack": {
						"type": "boolean",
						"description": "Whether the command has been acknowledged.",
						"example": true
					},
					"retrievedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was retrieved.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"completedDate": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Instant"
							}
						],
						"nullable": true,
						"description": "The date and time when the command was completed.",
						"example": "2023-10-31T12:35:56.789Z"
					},
					"result": {
						"type": "string",
						"nullable": true,
						"description": "The result of the command execution.",
						"example": "Success"
					},
					"targetVersion": {
						"type": "string",
						"description": "The target version for the command.",
						"example": "3.7.0"
					},
					"northConnectorId": {
						"type": "string",
						"description": "The ID of the north connector.",
						"example": "north123"
					},
					"commandContent": {
						"items": {
							"properties": {
								"value": {
									"type": "string",
									"description": "The value of the setpoint.",
									"example": "100"
								},
								"reference": {
									"type": "string",
									"description": "The reference of the setpoint.",
									"example": "setpoint1"
								}
							},
							"required": [
								"value",
								"reference"
							],
							"type": "object"
						},
						"type": "array",
						"description": "The content of the command, including setpoint details."
					}
				},
				"required": [
					"id",
					"type",
					"status",
					"ack",
					"retrievedDate",
					"completedDate",
					"result",
					"targetVersion",
					"northConnectorId",
					"commandContent"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "cmd123",
					"type": "setpoint",
					"status": "RETRIEVED",
					"ack": false,
					"retrievedDate": null,
					"completedDate": null,
					"result": null,
					"targetVersion": "3.7.0",
					"northConnectorId": "north123",
					"commandContent": [
						{
							"reference": "setpoint1",
							"value": "100"
						}
					]
				}
			},
			"OIBusCommandDTO": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/OIBusUpdateVersionCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusRegenerateCipherKeysCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusRestartEngineCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusUpdateEngineSettingsCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusUpdateRegistrationSettingsCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusCreateScanModeCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusUpdateScanModeCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusDeleteScanModeCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusCreateIPFilterCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusUpdateIPFilterCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusDeleteIPFilterCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusCreateCertificateCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusUpdateCertificateCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusDeleteCertificateCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusCreateSouthConnectorCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusUpdateSouthConnectorCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusDeleteSouthConnectorCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusTestSouthConnectorCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusTestSouthConnectorItemCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusCreateNorthConnectorCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusUpdateNorthConnectorCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusDeleteNorthConnectorCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusTestNorthConnectorCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusCreateOrUpdateSouthConnectorItemsFromCSVCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusCreateHistoryQueryCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusUpdateHistoryQueryCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusDeleteHistoryQueryCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusTestHistoryQueryNorthConnectionCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusTestHistoryQuerySouthConnectionCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusTestHistoryQuerySouthItemCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusCreateOrUpdateHistoryQuerySouthItemsFromCSVCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusUpdateHistoryQueryStatusCommandDTO"
					},
					{
						"$ref": "#/components/schemas/OIBusSetpointCommandDTO"
					}
				],
				"description": "Union type representing all possible OIBus command DTOs."
			},
			"Page_OIBusCommandDTO_": {
				"description": "Represents a paginated response containing an array of elements.",
				"properties": {
					"content": {
						"items": {
							"$ref": "#/components/schemas/OIBusCommandDTO"
						},
						"type": "array",
						"description": "The content of the page - an array of elements."
					},
					"totalElements": {
						"type": "number",
						"format": "double",
						"description": "The total number of elements across all pages.",
						"example": 2
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "The size of the page, i.e., the maximum number of elements per page.",
						"example": 10
					},
					"number": {
						"type": "number",
						"format": "double",
						"description": "The number of the current page, starting at 0.",
						"example": 0
					},
					"totalPages": {
						"type": "number",
						"format": "double",
						"description": "The total number of pages (which can be 0 if there are no elements).",
						"example": 1
					}
				},
				"required": [
					"content",
					"totalElements",
					"size",
					"number",
					"totalPages"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"content": [
						{
							"id": "item1"
						},
						{
							"id": "item2"
						}
					],
					"totalElements": 2,
					"size": 10,
					"number": 0,
					"totalPages": 1
				}
			},
			"OIBusNorthCategory": {
				"type": "string",
				"enum": [
					"file",
					"iot",
					"api",
					"debug"
				]
			},
			"NorthConnectorType": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/OIBusNorthType",
						"description": "North connector type ID"
					},
					"category": {
						"$ref": "#/components/schemas/OIBusNorthCategory",
						"description": "Category of the north connector"
					},
					"types": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Supported types"
					}
				},
				"required": [
					"id",
					"category",
					"types"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthConnectorManifest": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/OIBusNorthType"
					},
					"category": {
						"$ref": "#/components/schemas/OIBusNorthCategory"
					},
					"types": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"settings": {
						"$ref": "#/components/schemas/OIBusObjectAttribute"
					}
				},
				"required": [
					"id",
					"category",
					"types",
					"settings"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthConnectorLightDTO": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/OIBusNorthType"
					},
					"description": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					}
				},
				"required": [
					"id",
					"name",
					"type",
					"description",
					"enabled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TransformerDTOWithOptions": {
				"description": "Data Transfer Object for a transformer with its options.\nUsed when a transformer needs to be applied with specific configuration options.",
				"properties": {
					"inputType": {
						"type": "string",
						"description": "The input data type that the transformer accepts.",
						"example": "string"
					},
					"transformer": {
						"$ref": "#/components/schemas/TransformerDTO",
						"description": "The transformer to be applied."
					},
					"options": {
						"$ref": "#/components/schemas/Record_string.unknown_",
						"description": "Configuration options for the transformer.",
						"example": {
							"precision": 2,
							"defaultValue": 0
						}
					}
				},
				"required": [
					"inputType",
					"transformer",
					"options"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NorthConnectorDTO_NorthSettings_": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/OIBusNorthType"
					},
					"description": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"settings": {
						"$ref": "#/components/schemas/NorthSettings"
					},
					"caching": {
						"properties": {
							"archive": {
								"properties": {
									"retentionDuration": {
										"type": "number",
										"format": "double"
									},
									"enabled": {
										"type": "boolean"
									}
								},
								"required": [
									"retentionDuration",
									"enabled"
								],
								"type": "object"
							},
							"error": {
								"properties": {
									"retentionDuration": {
										"type": "number",
										"format": "double"
									},
									"retryCount": {
										"type": "number",
										"format": "double"
									},
									"retryInterval": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"retentionDuration",
									"retryCount",
									"retryInterval"
								],
								"type": "object"
							},
							"throttling": {
								"properties": {
									"maxNumberOfElements": {
										"type": "number",
										"format": "double"
									},
									"maxSize": {
										"type": "number",
										"format": "double"
									},
									"runMinDelay": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"maxNumberOfElements",
									"maxSize",
									"runMinDelay"
								],
								"type": "object"
							},
							"trigger": {
								"properties": {
									"numberOfFiles": {
										"type": "number",
										"format": "double"
									},
									"numberOfElements": {
										"type": "number",
										"format": "double"
									},
									"scanMode": {
										"$ref": "#/components/schemas/ScanModeDTO"
									}
								},
								"required": [
									"numberOfFiles",
									"numberOfElements",
									"scanMode"
								],
								"type": "object"
							}
						},
						"required": [
							"archive",
							"error",
							"throttling",
							"trigger"
						],
						"type": "object"
					},
					"subscriptions": {
						"items": {
							"$ref": "#/components/schemas/SouthConnectorLightDTO"
						},
						"type": "array"
					},
					"transformers": {
						"items": {
							"$ref": "#/components/schemas/TransformerDTOWithOptions"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"type",
					"description",
					"enabled",
					"settings",
					"caching",
					"subscriptions",
					"transformers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.string-or-number_": {
				"properties": {},
				"additionalProperties": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "number",
							"format": "double"
						}
					]
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"CacheMetadata": {
				"description": "Metadata for cached content.",
				"properties": {
					"contentFile": {
						"type": "string",
						"description": "The path to the content file.",
						"example": "/path/to/content.json"
					},
					"contentSize": {
						"type": "number",
						"format": "double",
						"description": "The size of the content in bytes.",
						"example": 1024
					},
					"numberOfElement": {
						"type": "number",
						"format": "double",
						"description": "The number of elements in the content.",
						"example": 10
					},
					"createdAt": {
						"$ref": "#/components/schemas/Instant",
						"description": "The creation time of the content.",
						"example": "2023-01-01T00:00:00Z"
					},
					"contentType": {
						"type": "string",
						"description": "The type of the content.",
						"example": "time-values"
					},
					"source": {
						"type": "string",
						"description": "The source of the content.",
						"example": "south1"
					},
					"options": {
						"$ref": "#/components/schemas/Record_string.string-or-number_",
						"description": "Additional options associated with the content."
					}
				},
				"required": [
					"contentFile",
					"contentSize",
					"numberOfElement",
					"createdAt",
					"contentType",
					"source",
					"options"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"contentFile": "/path/to/content.json",
					"contentSize": 1024,
					"numberOfElement": 10,
					"createdAt": "2023-01-01T00:00:00Z",
					"contentType": "time-values",
					"source": "south1",
					"options": {
						"key1": "value1",
						"key2": 100
					}
				}
			},
			"NorthCacheMetadata": {
				"properties": {
					"metadataFilename": {
						"type": "string",
						"description": "Filename of the metadata"
					},
					"metadata": {
						"$ref": "#/components/schemas/CacheMetadata",
						"description": "Metadata content"
					}
				},
				"required": [
					"metadataFilename",
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ScopeType": {
				"type": "string",
				"enum": [
					"south",
					"north",
					"history-query",
					"internal",
					"web-server"
				],
				"description": "Type representing a scope type."
			},
			"LogDTO": {
				"description": "Data Transfer Object for a log entry.\nRepresents a log with its metadata, severity level, scope, and message content.",
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "The timestamp of the log entry in ISO 8601 format.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"level": {
						"$ref": "#/components/schemas/LogLevel",
						"description": "The severity level of the log entry.",
						"example": "error"
					},
					"scopeType": {
						"$ref": "#/components/schemas/ScopeType",
						"description": "The type of scope the log is associated with (e.g., 'south', 'north').",
						"example": "south"
					},
					"scopeId": {
						"type": "string",
						"nullable": true,
						"description": "The unique identifier of the scope (e.g., connector ID).\nCan be `null` if the log is not associated with a specific scope.",
						"example": "connector123"
					},
					"scopeName": {
						"type": "string",
						"nullable": true,
						"description": "The human-readable name of the scope.\nCan be `null` if the log is not associated with a specific scope.",
						"example": "South Connector 1"
					},
					"message": {
						"type": "string",
						"description": "The log message content, including details about the event or error.",
						"example": "Connection failed to host: timeout after 5s"
					}
				},
				"required": [
					"timestamp",
					"level",
					"scopeType",
					"scopeId",
					"scopeName",
					"message"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"timestamp": "2023-10-31T12:34:56.789Z",
					"level": "error",
					"scopeType": "south",
					"scopeId": "connector123",
					"scopeName": "South Connector 1",
					"message": "Connection failed to host: timeout after 5s"
				}
			},
			"Page_LogDTO_": {
				"description": "Represents a paginated response containing an array of elements.",
				"properties": {
					"content": {
						"items": {
							"$ref": "#/components/schemas/LogDTO"
						},
						"type": "array",
						"description": "The content of the page - an array of elements."
					},
					"totalElements": {
						"type": "number",
						"format": "double",
						"description": "The total number of elements across all pages.",
						"example": 2
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "The size of the page, i.e., the maximum number of elements per page.",
						"example": 10
					},
					"number": {
						"type": "number",
						"format": "double",
						"description": "The number of the current page, starting at 0.",
						"example": 0
					},
					"totalPages": {
						"type": "number",
						"format": "double",
						"description": "The total number of pages (which can be 0 if there are no elements).",
						"example": 1
					}
				},
				"required": [
					"content",
					"totalElements",
					"size",
					"number",
					"totalPages"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"content": [
						{
							"id": "item1"
						},
						{
							"id": "item2"
						}
					],
					"totalElements": 2,
					"size": 10,
					"number": 0,
					"totalPages": 1
				}
			},
			"Scope": {
				"description": "Represents a scope associated with log entries.\nA scope can be a connector, service, or module.",
				"properties": {
					"scopeId": {
						"type": "string",
						"description": "The unique identifier of the scope (e.g., connector ID, service ID).",
						"example": "connector123"
					},
					"scopeName": {
						"type": "string",
						"description": "The human-readable name of the scope.",
						"example": "South Connector 1"
					}
				},
				"required": [
					"scopeId",
					"scopeName"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"scopeId": "connector123",
					"scopeName": "South Connector 1"
				}
			},
			"IPFilterDTO": {
				"description": "Data Transfer Object for an IP filter.\nRepresents a configured IP filter with its address and description.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"address": {
						"type": "string",
						"description": "The IP address or CIDR block to filter.\nCan be an IPv4 address, IPv6 address, or CIDR notation.",
						"example": "192.168.1.1"
					},
					"description": {
						"type": "string",
						"description": "A description of the purpose or reason for this IP filter.",
						"example": "Allow traffic from the local admin workstation"
					}
				},
				"required": [
					"id",
					"address",
					"description"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "aBc12F",
					"address": "192.168.1.1",
					"description": "Allow traffic from the local admin workstation"
				}
			},
			"HistoryQueryLightDTO": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/HistoryQueryStatus"
					},
					"startTime": {
						"type": "string"
					},
					"endTime": {
						"type": "string"
					},
					"southType": {
						"$ref": "#/components/schemas/OIBusSouthType"
					},
					"northType": {
						"$ref": "#/components/schemas/OIBusNorthType"
					}
				},
				"required": [
					"id",
					"name",
					"description",
					"status",
					"startTime",
					"endTime",
					"southType",
					"northType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HistoryQueryItemDTO_SouthItemSettings_": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"settings": {
						"$ref": "#/components/schemas/SouthItemSettings"
					}
				},
				"required": [
					"id",
					"name",
					"enabled",
					"settings"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HistoryQueryDTO_SouthSettings.NorthSettings.SouthItemSettings_": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/HistoryQueryStatus"
					},
					"startTime": {
						"type": "string"
					},
					"endTime": {
						"type": "string"
					},
					"southType": {
						"$ref": "#/components/schemas/OIBusSouthType"
					},
					"northType": {
						"$ref": "#/components/schemas/OIBusNorthType"
					},
					"southSettings": {
						"$ref": "#/components/schemas/SouthSettings"
					},
					"northSettings": {
						"$ref": "#/components/schemas/NorthSettings"
					},
					"caching": {
						"properties": {
							"archive": {
								"properties": {
									"retentionDuration": {
										"type": "number",
										"format": "double"
									},
									"enabled": {
										"type": "boolean"
									}
								},
								"required": [
									"retentionDuration",
									"enabled"
								],
								"type": "object"
							},
							"error": {
								"properties": {
									"retentionDuration": {
										"type": "number",
										"format": "double"
									},
									"retryCount": {
										"type": "number",
										"format": "double"
									},
									"retryInterval": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"retentionDuration",
									"retryCount",
									"retryInterval"
								],
								"type": "object"
							},
							"throttling": {
								"properties": {
									"maxNumberOfElements": {
										"type": "number",
										"format": "double"
									},
									"maxSize": {
										"type": "number",
										"format": "double"
									},
									"runMinDelay": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"maxNumberOfElements",
									"maxSize",
									"runMinDelay"
								],
								"type": "object"
							},
							"trigger": {
								"properties": {
									"numberOfFiles": {
										"type": "number",
										"format": "double"
									},
									"numberOfElements": {
										"type": "number",
										"format": "double"
									},
									"scanMode": {
										"$ref": "#/components/schemas/ScanModeDTO"
									}
								},
								"required": [
									"numberOfFiles",
									"numberOfElements",
									"scanMode"
								],
								"type": "object"
							}
						},
						"required": [
							"archive",
							"error",
							"throttling",
							"trigger"
						],
						"type": "object"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/HistoryQueryItemDTO_SouthItemSettings_"
						},
						"type": "array"
					},
					"northTransformers": {
						"items": {
							"$ref": "#/components/schemas/TransformerDTOWithOptions"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"description",
					"status",
					"startTime",
					"endTime",
					"southType",
					"northType",
					"southSettings",
					"northSettings",
					"caching",
					"items",
					"northTransformers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HistorySouthItemTestRequest": {
				"properties": {
					"southSettings": {
						"$ref": "#/components/schemas/SouthSettings",
						"description": "South connector settings"
					},
					"itemSettings": {
						"$ref": "#/components/schemas/SouthItemSettings",
						"description": "Item-specific settings"
					},
					"testingSettings": {
						"properties": {
							"history": {
								"properties": {
									"endTime": {
										"type": "string",
										"description": "End time for the test"
									},
									"startTime": {
										"type": "string",
										"description": "Start time for the test"
									}
								},
								"required": [
									"endTime",
									"startTime"
								],
								"type": "object"
							}
						},
						"required": [
							"history"
						],
						"type": "object",
						"description": "Testing settings including time range"
					}
				},
				"required": [
					"southSettings",
					"itemSettings",
					"testingSettings"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Page_HistoryQueryItemDTO_SouthItemSettings__": {
				"description": "Represents a paginated response containing an array of elements.",
				"properties": {
					"content": {
						"items": {
							"$ref": "#/components/schemas/HistoryQueryItemDTO_SouthItemSettings_"
						},
						"type": "array",
						"description": "The content of the page - an array of elements."
					},
					"totalElements": {
						"type": "number",
						"format": "double",
						"description": "The total number of elements across all pages.",
						"example": 2
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "The size of the page, i.e., the maximum number of elements per page.",
						"example": 10
					},
					"number": {
						"type": "number",
						"format": "double",
						"description": "The number of the current page, starting at 0.",
						"example": 0
					},
					"totalPages": {
						"type": "number",
						"format": "double",
						"description": "The total number of pages (which can be 0 if there are no elements).",
						"example": 1
					}
				},
				"required": [
					"content",
					"totalElements",
					"size",
					"number",
					"totalPages"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"content": [
						{
							"id": "item1"
						},
						{
							"id": "item2"
						}
					],
					"totalElements": 2,
					"size": 10,
					"number": 0,
					"totalPages": 1
				}
			},
			"HistoryCsvDelimiterRequest": {
				"properties": {
					"delimiter": {
						"type": "string",
						"description": "CSV delimiter character"
					}
				},
				"required": [
					"delimiter"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HistoryCsvImportResponse": {
				"properties": {
					"items": {
						"items": {
							"$ref": "#/components/schemas/HistoryQueryItemCommandDTO_SouthItemSettings_"
						},
						"type": "array",
						"description": "Array of valid items that can be imported"
					},
					"errors": {
						"items": {
							"properties": {
								"error": {
									"type": "string"
								},
								"item": {
									"$ref": "#/components/schemas/Record_string.string_"
								}
							},
							"required": [
								"error",
								"item"
							],
							"type": "object"
						},
						"type": "array",
						"description": "Array of items with errors"
					}
				},
				"required": [
					"items",
					"errors"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HistoryCacheMetadata": {
				"properties": {
					"metadataFilename": {
						"type": "string",
						"description": "Filename of the metadata"
					},
					"metadata": {
						"$ref": "#/components/schemas/CacheMetadata",
						"description": "Metadata content"
					}
				},
				"required": [
					"metadataFilename",
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EngineSettingsDTO": {
				"description": "Engine settings Data Transfer Object.\nRepresents the configuration settings for the engine.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string",
						"description": "The name of the engine.",
						"example": "OIBus OT"
					},
					"port": {
						"type": "number",
						"format": "double",
						"description": "The port on which the engine listens.",
						"example": 2223
					},
					"version": {
						"type": "string",
						"description": "The version of the engine.",
						"example": "3.7.0"
					},
					"launcherVersion": {
						"type": "string",
						"description": "The version of the launcher.",
						"example": "3.7.0"
					},
					"proxyEnabled": {
						"type": "boolean",
						"description": "Whether the proxy is enabled.",
						"example": false
					},
					"proxyPort": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The port for the proxy, if enabled.",
						"example": null
					},
					"logParameters": {
						"properties": {
							"oia": {
								"properties": {
									"interval": {
										"type": "number",
										"format": "double",
										"description": "The interval in seconds for sending logs to OIA.",
										"example": 60
									},
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for OIA output.",
										"example": "info"
									}
								},
								"required": [
									"interval",
									"level"
								],
								"type": "object",
								"description": "OIA logging configuration."
							},
							"loki": {
								"properties": {
									"password": {
										"type": "string",
										"description": "The password for Loki authentication.",
										"example": "pass"
									},
									"username": {
										"type": "string",
										"description": "The username for Loki authentication.",
										"example": "user"
									},
									"address": {
										"type": "string",
										"description": "The address of the Loki server.",
										"example": "http://loki:3100"
									},
									"interval": {
										"type": "number",
										"format": "double",
										"description": "The interval in seconds for sending logs to Loki.",
										"example": 60
									},
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for Loki output.",
										"example": "error"
									}
								},
								"required": [
									"password",
									"username",
									"address",
									"interval",
									"level"
								],
								"type": "object",
								"description": "Loki logging configuration."
							},
							"database": {
								"properties": {
									"maxNumberOfLogs": {
										"type": "number",
										"format": "double",
										"description": "The maximum number of logs to keep in the database.",
										"example": 10000
									},
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for database output.",
										"example": "warn"
									}
								},
								"required": [
									"maxNumberOfLogs",
									"level"
								],
								"type": "object",
								"description": "Database logging configuration."
							},
							"file": {
								"properties": {
									"numberOfFiles": {
										"type": "number",
										"format": "double",
										"description": "The number of log files to keep.",
										"example": 5
									},
									"maxFileSize": {
										"type": "number",
										"format": "double",
										"description": "The maximum size of a log file in bytes.",
										"example": 10485760
									},
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for file output.",
										"example": "debug"
									}
								},
								"required": [
									"numberOfFiles",
									"maxFileSize",
									"level"
								],
								"type": "object",
								"description": "File logging configuration."
							},
							"console": {
								"properties": {
									"level": {
										"$ref": "#/components/schemas/LogLevel",
										"description": "The log level for console output.",
										"example": "info"
									}
								},
								"required": [
									"level"
								],
								"type": "object",
								"description": "Console logging configuration."
							}
						},
						"required": [
							"oia",
							"loki",
							"database",
							"file",
							"console"
						],
						"type": "object",
						"description": "Logging parameters for different outputs."
					}
				},
				"required": [
					"id",
					"name",
					"port",
					"version",
					"launcherVersion",
					"proxyEnabled",
					"proxyPort",
					"logParameters"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OIBusInfo": {
				"description": "Information about the OIBus instance.",
				"properties": {
					"version": {
						"type": "string",
						"description": "The version of OIBus.",
						"example": "3.7.0"
					},
					"launcherVersion": {
						"type": "string",
						"description": "The version of the launcher.",
						"example": "3.7.0"
					},
					"oibusName": {
						"type": "string",
						"description": "The name of the OIBus instance.",
						"example": "OIBus OT"
					},
					"oibusId": {
						"type": "string",
						"description": "The ID of the OIBus instance.",
						"example": "aBc12F"
					},
					"dataDirectory": {
						"type": "string",
						"description": "The data directory for OIBus.",
						"example": "/var/lib/oibus"
					},
					"binaryDirectory": {
						"type": "string",
						"description": "The binary directory for OIBus.",
						"example": "/usr/lib/oibus"
					},
					"processId": {
						"type": "string",
						"description": "The process ID of the OIBus instance.",
						"example": "12345"
					},
					"hostname": {
						"type": "string",
						"description": "The hostname of the machine running OIBus.",
						"example": "server1"
					},
					"operatingSystem": {
						"type": "string",
						"description": "The operating system of the machine.",
						"example": "linux"
					},
					"architecture": {
						"type": "string",
						"description": "The architecture of the machine.",
						"example": "x64"
					},
					"platform": {
						"type": "string",
						"description": "The platform of the machine.",
						"example": "ubuntu"
					}
				},
				"required": [
					"version",
					"launcherVersion",
					"oibusName",
					"oibusId",
					"dataDirectory",
					"binaryDirectory",
					"processId",
					"hostname",
					"operatingSystem",
					"architecture",
					"platform"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"version": "3.7.0",
					"launcherVersion": "3.7.0",
					"oibusName": "OIBus OT",
					"oibusId": "aBc12F",
					"dataDirectory": "/var/lib/oibus",
					"binaryDirectory": "/usr/lib/oibus",
					"processId": "12345",
					"hostname": "server1",
					"operatingSystem": "linux",
					"architecture": "x64",
					"platform": "ubuntu"
				}
			},
			"CertificateDTO": {
				"description": "Data Transfer Object for a certificate.\nRepresents a certificate with its metadata, public key, and expiry information.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the entity.",
						"example": "entity123"
					},
					"creationDate": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was created.",
						"example": "2023-10-31T12:34:56.789Z"
					},
					"lastEditInstant": {
						"$ref": "#/components/schemas/Instant",
						"description": "The date and time when the entity was last edited.",
						"example": "2023-10-31T13:45:00.123Z"
					},
					"name": {
						"type": "string",
						"description": "The name of the certificate.",
						"example": "Server SSL Certificate"
					},
					"description": {
						"type": "string",
						"description": "A description of the certificate's purpose or usage.",
						"example": "SSL certificate for securing server communications"
					},
					"publicKey": {
						"type": "string",
						"description": "The public key of the certificate in PEM format.",
						"example": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA..."
					},
					"certificate": {
						"type": "string",
						"description": "The certificate in PEM format.",
						"example": "-----BEGIN CERTIFICATE-----\nMIIDXTCCAkWgAwIBAgIJAKoK/heBjcOuMA0GCSqGSIb3DQEBBQUAMEUx..."
					},
					"expiry": {
						"$ref": "#/components/schemas/Instant",
						"description": "The expiry date and time of the certificate.",
						"example": "2024-12-31T23:59:59Z"
					}
				},
				"required": [
					"id",
					"name",
					"description",
					"publicKey",
					"certificate",
					"expiry"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"id": "aBc12F",
					"name": "Server SSL Certificate",
					"description": "SSL certificate for securing server communications",
					"publicKey": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...",
					"certificate": "-----BEGIN CERTIFICATE-----\nMIIDXTCCAkWgAwIBAgIJAKoK/heBjcOuMA0GCSqGSIb3DQEBBQUAMEUx...",
					"expiry": "2024-12-31T23:59:59Z",
					"createdAt": "2023-01-01T00:00:00Z",
					"updatedAt": "2023-01-01T00:00:00Z"
				}
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "OIBus API",
		"version": "3.7.0",
		"description": "OIBus API is a RESTful interface for managing industrial data flows. It allows you to configure connectors, schedule data collection, transform and route data, monitor system health, and secure communications. Designed for developers and system integrators, it enables seamless integration between industrial systems and enterprise applications.",
		"license": {
			"name": "EUPL"
		},
		"contact": {
			"email": "oibus@optimistik.com",
			"name": "Optimistik SAS",
			"url": "https://www.optimistik.com/"
		}
	},
	"paths": {
		"/api/users": {
			"get": {
				"operationId": "Search",
				"responses": {
					"200": {
						"description": "Paginated list of user accounts",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Page_UserDTO_"
								}
							}
						}
					}
				},
				"description": "Searches for users with optional filtering by login name",
				"summary": "Search users",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "login",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "User created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserDTO"
								}
							}
						}
					}
				},
				"description": "Creates a new user account with the provided details and password",
				"summary": "Create user",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserWithPassword"
							}
						}
					}
				}
			}
		},
		"/api/users/{userId}": {
			"get": {
				"operationId": "FindById",
				"responses": {
					"200": {
						"description": "The user account details",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserDTO"
								}
							}
						}
					}
				},
				"description": "Retrieves a specific user by their unique identifier",
				"summary": "Get user details",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"204": {
						"description": "User updated successfully"
					}
				},
				"description": "Updates an existing user account with new details",
				"summary": "Update user",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserCommandDTO"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "User deleted successfully"
					}
				},
				"description": "Deletes a user account by its unique identifier",
				"summary": "Delete user",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/users/{userId}/password": {
			"post": {
				"operationId": "UpdatePassword",
				"responses": {
					"204": {
						"description": "Password updated successfully"
					}
				},
				"description": "Updates a user's password",
				"summary": "Change password",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChangePasswordCommand"
							}
						}
					}
				}
			}
		},
		"/api/transformers/search": {
			"get": {
				"operationId": "Search",
				"responses": {
					"200": {
						"description": "Paginated list of transformers",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Page_TransformerDTO_"
								}
							}
						}
					}
				},
				"description": "Searches for transformers with optional filtering by type, input type, and output type",
				"summary": "Search transformers",
				"tags": [
					"Transformers"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"standard",
								"custom"
							]
						}
					},
					{
						"in": "query",
						"name": "inputType",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/OIBusDataType"
						}
					},
					{
						"in": "query",
						"name": "outputType",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/OIBusDataType"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/transformers/list": {
			"get": {
				"operationId": "List",
				"responses": {
					"200": {
						"description": "Array of all transformer objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TransformerDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a complete list of all available transformers",
				"summary": "List all transformers",
				"tags": [
					"Transformers"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/transformers/{transformerId}": {
			"get": {
				"operationId": "FindById",
				"responses": {
					"200": {
						"description": "The transformer object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransformerDTO"
								}
							}
						}
					}
				},
				"description": "Retrieves a specific transformer by its unique identifier",
				"summary": "Get transformer by ID",
				"tags": [
					"Transformers"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "transformerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"204": {
						"description": "Transformer updated successfully"
					}
				},
				"description": "Updates an existing custom transformer with new configuration",
				"summary": "Update transformer",
				"tags": [
					"Transformers"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "transformerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CustomTransformerCommandDTO"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "Transformer deleted successfully"
					}
				},
				"description": "Deletes a transformer by its unique identifier",
				"summary": "Delete transformer",
				"tags": [
					"Transformers"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "transformerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/transformers": {
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Transformer created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CustomTransformerDTO"
								}
							}
						}
					}
				},
				"description": "Creates a new data transformer with the provided configuration",
				"summary": "Create transformer",
				"tags": [
					"Transformers"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CustomTransformerCommandDTO"
							}
						}
					}
				}
			}
		},
		"/api/south/types": {
			"get": {
				"operationId": "GetSouthTypes",
				"responses": {
					"200": {
						"description": "Array of south connector type objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SouthType"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all south connector types",
				"summary": "List all south connector types",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/south/manifests/{type}": {
			"get": {
				"operationId": "GetSouthManifest",
				"responses": {
					"200": {
						"description": "The south connector manifest",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SouthConnectorManifest"
								}
							}
						}
					}
				},
				"description": "Get a specific south connector manifest",
				"summary": "Get south connector manifest",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "type",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/OIBusSouthType"
						}
					}
				]
			}
		},
		"/api/south": {
			"get": {
				"operationId": "List",
				"responses": {
					"200": {
						"description": "Array of south connector objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SouthConnectorLightDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "List all south connectors",
				"summary": "List all south connectors",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SouthConnectorDTO_SouthSettings.SouthItemSettings_"
								}
							}
						}
					}
				},
				"description": "Create a new south connector",
				"summary": "Create south connector",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "duplicate",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SouthConnectorCommandDTO_SouthSettings.SouthItemSettings_"
							}
						}
					}
				}
			}
		},
		"/api/south/{southId}": {
			"get": {
				"operationId": "FindById",
				"responses": {
					"200": {
						"description": "The south connector object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SouthConnectorDTO_SouthSettings.SouthItemSettings_"
								}
							}
						}
					}
				},
				"description": "Get a specific south connector by ID",
				"summary": "Get south connector by ID",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Update an existing south connector",
				"summary": "Update south connector",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SouthConnectorCommandDTO_SouthSettings.SouthItemSettings_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Delete a south connector",
				"summary": "Delete south connector",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/south/{southId}/start": {
			"post": {
				"operationId": "Start",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Start a south connector",
				"summary": "Start south connector",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/south/{southId}/stop": {
			"post": {
				"operationId": "Stop",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Stop a south connector",
				"summary": "Stop south connector",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/south/{southId}/metrics/reset": {
			"post": {
				"operationId": "ResetSouthMetrics",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Reset south connector metrics",
				"summary": "Reset south connector metrics",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/south/{southId}/test/connection": {
			"post": {
				"operationId": "TestConnection",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Test south connector connection",
				"summary": "Test south connection",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "southType",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/OIBusSouthType"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SouthSettings"
							}
						}
					}
				}
			}
		},
		"/api/south/{southId}/items/test": {
			"post": {
				"operationId": "TestItem",
				"responses": {
					"200": {
						"description": "Test results",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OIBusContent"
								}
							}
						}
					}
				},
				"description": "Test a south connector item",
				"summary": "Test south connector item",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "southType",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/OIBusSouthType"
						}
					},
					{
						"in": "query",
						"name": "itemName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SouthItemTestRequest"
							}
						}
					}
				}
			}
		},
		"/api/south/{southId}/items/list": {
			"get": {
				"operationId": "ListItems",
				"responses": {
					"200": {
						"description": "Array of south connector item objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SouthConnectorItemDTO_SouthItemSettings_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "List all items for a south connector",
				"summary": "List south connector items",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/south/{southId}/items/search": {
			"get": {
				"operationId": "SearchItems",
				"responses": {
					"200": {
						"description": "Paginated list of items",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Page_SouthConnectorItemDTO_SouthItemSettings__"
								}
							}
						}
					}
				},
				"description": "Search items for a south connector",
				"summary": "Search south connector items",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/south/{southId}/items/{itemId}": {
			"get": {
				"operationId": "GetItem",
				"responses": {
					"200": {
						"description": "The south connector item",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SouthConnectorItemDTO_SouthItemSettings_"
								}
							}
						}
					}
				},
				"description": "Get a specific item from a south connector",
				"summary": "Get south connector item",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateItem",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Update an item in a south connector",
				"summary": "Update south connector item",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SouthConnectorItemCommandDTO_SouthItemSettings_"
							}
						}
					}
				}
			}
		},
		"/api/south/{southId}/items": {
			"post": {
				"operationId": "CreateItem",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SouthConnectorItemDTO_SouthItemSettings_"
								}
							}
						}
					}
				},
				"description": "Create a new item for a south connector",
				"summary": "Create south connector item",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SouthConnectorItemCommandDTO_SouthItemSettings_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteAllItems",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Delete all items from a south connector",
				"summary": "Delete all south connector items",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/south/{southId}/items/{itemId}/enable": {
			"post": {
				"operationId": "EnableItem",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Enable an item in a south connector",
				"summary": "Enable south connector item",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/south/{southId}/items/{itemId}/disable": {
			"post": {
				"operationId": "DisableItem",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Disable an item in a south connector",
				"summary": "Disable south connector item",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/south/{southType}/items/to-csv": {
			"post": {
				"operationId": "ItemsToCsv",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Convert items to CSV for a south type",
				"summary": "Convert items to CSV",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southType",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"delimiter": {
										"type": "string"
									},
									"items": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"delimiter",
									"items"
								]
							}
						}
					}
				}
			}
		},
		"/api/south/{southId}/items/export": {
			"post": {
				"operationId": "ExportItems",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Export south connector items to CSV",
				"summary": "Export items to CSV",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SouthCsvDelimiterRequest"
							}
						}
					}
				}
			}
		},
		"/api/south/{southType}/items/import/check": {
			"post": {
				"operationId": "CheckImportItems",
				"responses": {
					"200": {
						"description": "Import validation results",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SouthCsvImportResponse"
								}
							}
						}
					}
				},
				"description": "Check CSV import for validity",
				"summary": "Check CSV import",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southType",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"delimiter": {
										"type": "string"
									},
									"itemsToImport": {
										"type": "string",
										"format": "binary"
									},
									"currentItems": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"delimiter",
									"itemsToImport",
									"currentItems"
								]
							}
						}
					}
				}
			}
		},
		"/api/south/{southId}/items/import": {
			"post": {
				"operationId": "ImportItems",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Import items from CSV",
				"summary": "Import items from CSV",
				"tags": [
					"South Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"items": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"items"
								]
							}
						}
					}
				}
			}
		},
		"/api/scan-modes": {
			"get": {
				"operationId": "List",
				"responses": {
					"200": {
						"description": "Array of scan mode objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ScanModeDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of all scan modes",
				"summary": "List all scan modes",
				"tags": [
					"Scan Modes"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Scan mode created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ScanModeDTO"
								}
							}
						}
					}
				},
				"description": "Creates a new scan mode with the provided configuration",
				"summary": "Create scan mode",
				"tags": [
					"Scan Modes"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ScanModeCommandDTO"
							}
						}
					}
				}
			}
		},
		"/api/scan-modes/{scanModeId}": {
			"get": {
				"operationId": "FindById",
				"responses": {
					"200": {
						"description": "The scan mode object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ScanModeDTO"
								}
							}
						}
					}
				},
				"description": "Retrieves a specific scan mode by its unique identifier",
				"summary": "Get scan mode",
				"tags": [
					"Scan Modes"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "scanModeId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"204": {
						"description": "Scan mode updated successfully"
					}
				},
				"description": "Updates an existing scan mode with new configuration",
				"summary": "Update scan mode",
				"tags": [
					"Scan Modes"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "scanModeId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ScanModeCommandDTO"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "Scan mode deleted successfully"
					}
				},
				"description": "Deletes a scan mode by its unique identifier",
				"summary": "Delete scan mode",
				"tags": [
					"Scan Modes"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "scanModeId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/scan-modes/verify": {
			"post": {
				"operationId": "VerifyCron",
				"responses": {
					"200": {
						"description": "The cron validation with next execution times",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidatedCronExpression"
								}
							}
						}
					}
				},
				"description": "Validates a cron expression to ensure it's properly formatted",
				"summary": "Validate cron expression",
				"tags": [
					"Scan Modes"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"cron": {
										"type": "string"
									}
								},
								"required": [
									"cron"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/api/oianalytics/registration": {
			"get": {
				"operationId": "GetRegistrationSettings",
				"responses": {
					"200": {
						"description": "The registration settings",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RegistrationSettingsDTO"
								}
							}
						}
					}
				},
				"description": "Returns the current OIAnalytics registration settings",
				"summary": "Retrieve registration settings",
				"tags": [
					"OIAnalytics Registration"
				],
				"security": [],
				"parameters": []
			},
			"put": {
				"operationId": "EditRegistrationSettings",
				"responses": {
					"204": {
						"description": "Connection settings updated successfully"
					}
				},
				"description": "Updates the connection settings for the OIAnalytics service",
				"summary": "Update connection settings",
				"tags": [
					"OIAnalytics Registration"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationSettingsCommandDTO"
							}
						}
					}
				}
			}
		},
		"/api/oianalytics/register": {
			"post": {
				"operationId": "Register",
				"responses": {
					"204": {
						"description": "Registration completed successfully"
					}
				},
				"description": "Registers the current instance of OIBus with the OIAnalytics service",
				"summary": "Register service",
				"tags": [
					"OIAnalytics Registration"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationSettingsCommandDTO"
							}
						}
					}
				}
			}
		},
		"/api/oianalytics/unregister": {
			"post": {
				"operationId": "Unregister",
				"responses": {
					"204": {
						"description": "Unregistration completed successfully"
					}
				},
				"description": "Unregister from OIAnalytics service. OIBus will still be registered on OIAnalytics. It must be removed manually",
				"summary": "Unregister service",
				"tags": [
					"OIAnalytics Registration"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/oianalytics/commands/search": {
			"get": {
				"operationId": "Search",
				"responses": {
					"200": {
						"description": "Paginated list of commands",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Page_OIBusCommandDTO_"
								}
							}
						}
					}
				},
				"description": "Searches OIAnalytics commands with optional filtering by type and status.",
				"summary": "Search OIAnalytics commands",
				"tags": [
					"OIAnalytics Commands"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "types",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "status",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "start",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Instant"
						}
					},
					{
						"in": "query",
						"name": "end",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Instant"
						}
					},
					{
						"in": "query",
						"name": "ack",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 0,
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/oianalytics/commands/{commandId}": {
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "Command deleted successfully"
					}
				},
				"description": "Deletes an OIAnalytics command by its unique identifier",
				"summary": "Delete OIAnalytics command",
				"tags": [
					"OIAnalytics Commands"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "commandId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/north/types": {
			"get": {
				"operationId": "GetNorthTypes",
				"responses": {
					"200": {
						"description": "Array of north connector type objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/NorthConnectorType"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all north connector types",
				"summary": "List all north connector types",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/north/manifests/{type}": {
			"get": {
				"operationId": "GetNorthManifest",
				"responses": {
					"200": {
						"description": "The north connector manifest",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NorthConnectorManifest"
								}
							}
						}
					}
				},
				"description": "Get a specific north connector manifest",
				"summary": "Get north connector manifest",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/north": {
			"get": {
				"operationId": "List",
				"responses": {
					"200": {
						"description": "Array of north connector objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/NorthConnectorLightDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "List all north connectors",
				"summary": "List all north connectors",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NorthConnectorDTO_NorthSettings_"
								}
							}
						}
					}
				},
				"description": "Create a new north connector",
				"summary": "Create north connector",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "duplicate",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NorthConnectorCommandDTO_NorthSettings_"
							}
						}
					}
				}
			}
		},
		"/api/north/{northId}": {
			"get": {
				"operationId": "FindById",
				"responses": {
					"200": {
						"description": "The north connector object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NorthConnectorDTO_NorthSettings_"
								}
							}
						}
					}
				},
				"description": "Get a specific north connector by ID",
				"summary": "Get north connector by ID",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Update an existing north connector",
				"summary": "Update north connector",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NorthConnectorCommandDTO_NorthSettings_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Delete a north connector",
				"summary": "Delete north connector",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/north/{northId}/start": {
			"post": {
				"operationId": "Start",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Start a north connector",
				"summary": "Start north connector",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/north/{northId}/stop": {
			"post": {
				"operationId": "Stop",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Stop a north connector",
				"summary": "Stop north connector",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/north/{northId}/metrics/reset": {
			"post": {
				"operationId": "ResetMetrics",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Reset north connector metrics",
				"summary": "Reset north connector metrics",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/north/{northId}/test/connection": {
			"post": {
				"operationId": "TestNorthConnection",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Test north connector connection",
				"summary": "Test north connection",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "northType",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/OIBusNorthType"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NorthSettings"
							}
						}
					}
				}
			}
		},
		"/api/north/{northId}/transformers": {
			"post": {
				"operationId": "AddOrEditTransformer",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Add or edit a transformer for a north connector",
				"summary": "Add/edit transformer",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TransformerDTOWithOptions"
							}
						}
					}
				}
			}
		},
		"/api/north/{northId}/transformers/{transformerId}": {
			"delete": {
				"operationId": "RemoveTransformer",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Remove a transformer from a north connector",
				"summary": "Remove transformer",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "transformerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/north/{northId}/subscriptions/{southId}": {
			"post": {
				"operationId": "AddSubscription",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Add a subscription to a north connector",
				"summary": "Add subscription",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "RemoveSubscription",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Remove a subscription from a north connector",
				"summary": "Remove subscription",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "southId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/north/{northId}/cache/search": {
			"get": {
				"operationId": "SearchCacheContent",
				"responses": {
					"200": {
						"description": "Array of cache file metadata",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/NorthCacheMetadata"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Search cache content for a north connector",
				"summary": "Search cache content",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "nameContains",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "start",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "end",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "folder",
						"required": false,
						"schema": {
							"default": "cache",
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				]
			}
		},
		"/api/north/{northId}/cache/content/{filename}": {
			"get": {
				"operationId": "GetCacheFileContent",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Download a cache file from a north connector",
				"summary": "Download cache file",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "filename",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "folder",
						"required": false,
						"schema": {
							"default": "cache",
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				]
			}
		},
		"/api/north/{northId}/cache/remove": {
			"post": {
				"operationId": "RemoveCacheContent",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Remove cache files from a north connector",
				"summary": "Remove cache files",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "folder",
						"required": false,
						"schema": {
							"default": "cache",
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/api/north/{northId}/cache/remove-all": {
			"post": {
				"operationId": "RemoveAllCacheContent",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Remove all cache files from a north connector",
				"summary": "Remove all cache files",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "folder",
						"required": false,
						"schema": {
							"default": "cache",
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				]
			}
		},
		"/api/north/{northId}/cache/move": {
			"post": {
				"operationId": "MoveCacheContent",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Move cache files between folders in a north connector",
				"summary": "Move cache files",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "originFolder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					},
					{
						"in": "query",
						"name": "destinationFolder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/api/north/{northId}/cache/move-all": {
			"post": {
				"operationId": "MoveAllCacheContent",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Move all cache files between folders in a north connector",
				"summary": "Move all cache files",
				"tags": [
					"North Connectors"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "originFolder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					},
					{
						"in": "query",
						"name": "destinationFolder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				]
			}
		},
		"/api/logs": {
			"get": {
				"operationId": "Search",
				"responses": {
					"200": {
						"description": "Paginated list of log entries",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Page_LogDTO_"
								}
							}
						}
					}
				},
				"description": "Searches system logs with various filter parameters. If no time range is specified, defaults to the last 24 hours.",
				"summary": "Search logs",
				"tags": [
					"Logs"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "start",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Instant"
						}
					},
					{
						"in": "query",
						"name": "end",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Instant"
						}
					},
					{
						"in": "query",
						"name": "levels",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "scopeIds",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "scopeTypes",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "messageContent",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/logs/scopes/suggest": {
			"get": {
				"operationId": "SuggestScopes",
				"responses": {
					"200": {
						"description": "Array of matching scope objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Scope"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Returns a list of scope suggestions based on the provided name fragment",
				"summary": "Get scope suggestions",
				"tags": [
					"Logs"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/logs/scopes/{scopeId}": {
			"get": {
				"operationId": "GetScopeById",
				"responses": {
					"200": {
						"description": "Scope object or null if not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Scope"
								}
							}
						}
					}
				},
				"description": "Retrieves details for a specific log scope by its ID",
				"summary": "Get log scope details",
				"tags": [
					"Logs"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "scopeId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/ip-filters": {
			"get": {
				"operationId": "List",
				"responses": {
					"200": {
						"description": "Array of IP filter objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IPFilterDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of all IP filters",
				"summary": "List all IP filters",
				"tags": [
					"IP Filters"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "IP filter created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IPFilterDTO"
								}
							}
						}
					}
				},
				"description": "Creates a new IP filter with the provided configuration",
				"summary": "Create IP filter",
				"tags": [
					"IP Filters"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IPFilterCommandDTO"
							}
						}
					}
				}
			}
		},
		"/api/ip-filters/{ipFilterId}": {
			"get": {
				"operationId": "FindById",
				"responses": {
					"200": {
						"description": "The IP filter object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IPFilterDTO"
								}
							}
						}
					}
				},
				"description": "Retrieves a specific IP filter by its unique identifier",
				"summary": "Get an IP filter",
				"tags": [
					"IP Filters"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "ipFilterId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"204": {
						"description": "IP filter updated successfully"
					}
				},
				"description": "Updates an existing IP filter with new configuration",
				"summary": "Update IP filter",
				"tags": [
					"IP Filters"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "ipFilterId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IPFilterCommandDTO"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "IP filter deleted successfully"
					}
				},
				"description": "Deletes an IP filter by its unique identifier",
				"summary": "Delete IP filter",
				"tags": [
					"IP Filters"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "ipFilterId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history": {
			"get": {
				"operationId": "List",
				"responses": {
					"200": {
						"description": "Array of history query objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/HistoryQueryLightDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all history queries",
				"summary": "List all history queries",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HistoryQueryDTO_SouthSettings.NorthSettings.SouthItemSettings_"
								}
							}
						}
					}
				},
				"description": "Create a new history query",
				"summary": "Create history query",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "fromSouth",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "fromNorth",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "duplicate",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HistoryQueryCommandDTO_SouthSettings.NorthSettings.SouthItemSettings_"
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}": {
			"get": {
				"operationId": "FindById",
				"responses": {
					"200": {
						"description": "The history query object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HistoryQueryDTO_SouthSettings.NorthSettings.SouthItemSettings_"
								}
							}
						}
					}
				},
				"description": "Get a specific history query by ID",
				"summary": "Get history query by ID",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Update an existing history query",
				"summary": "Update history query",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "resetCache",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HistoryQueryCommandDTO_SouthSettings.NorthSettings.SouthItemSettings_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Delete a history query",
				"summary": "Delete history query",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{historyId}/start": {
			"post": {
				"operationId": "Start",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Start a history query",
				"summary": "Start history query",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{historyId}/pause": {
			"post": {
				"operationId": "Pause",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Pause a history query",
				"summary": "Pause history query",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{historyId}/test/north": {
			"post": {
				"operationId": "TestNorthConnection",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Test north connection for a history query",
				"summary": "Test north connection",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "northType",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/OIBusNorthType"
						}
					},
					{
						"in": "query",
						"name": "fromNorth",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NorthSettings"
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}/test/south": {
			"post": {
				"operationId": "TestSouthConnection",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Test south connection for a history query",
				"summary": "Test south connection",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "southType",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/OIBusSouthType"
						}
					},
					{
						"in": "query",
						"name": "fromSouth",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SouthSettings"
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}/test/items": {
			"post": {
				"operationId": "TestItem",
				"responses": {
					"200": {
						"description": "Test results",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OIBusContent"
								}
							}
						}
					}
				},
				"description": "Test a history query item",
				"summary": "Test history query item",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "southType",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/OIBusSouthType"
						}
					},
					{
						"in": "query",
						"name": "itemName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "fromSouth",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HistorySouthItemTestRequest"
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}/items/list": {
			"get": {
				"operationId": "ListItems",
				"responses": {
					"200": {
						"description": "List of items",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/HistoryQueryItemDTO_SouthItemSettings_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all history query items",
				"summary": "Get history query items",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{historyId}/items/search": {
			"get": {
				"operationId": "SearchItems",
				"responses": {
					"200": {
						"description": "Paginated list of items",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Page_HistoryQueryItemDTO_SouthItemSettings__"
								}
							}
						}
					}
				},
				"description": "Search history query items",
				"summary": "Search history query items",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{historyId}/items/{itemId}": {
			"get": {
				"operationId": "GetItem",
				"responses": {
					"200": {
						"description": "The history query item",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HistoryQueryItemDTO_SouthItemSettings_"
								}
							}
						}
					}
				},
				"description": "Get a specific history query item",
				"summary": "Get history query item",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateItem",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Update a history query item",
				"summary": "Update history query item",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HistoryQueryItemCommandDTO_SouthItemSettings_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteItem",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Delete a history query item",
				"summary": "Delete history query item",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{historyId}/items": {
			"post": {
				"operationId": "CreateItem",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HistoryQueryItemDTO_SouthItemSettings_"
								}
							}
						}
					}
				},
				"description": "Create a new history query item",
				"summary": "Create history query item",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HistoryQueryItemCommandDTO_SouthItemSettings_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteAllItems",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Delete all items from a history query",
				"summary": "Delete all items",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{historyId}/items/{itemId}/enable": {
			"post": {
				"operationId": "EnableItem",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Enable a history query item",
				"summary": "Enable history query item",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{historyId}/items/{itemId}/disable": {
			"post": {
				"operationId": "DisableItem",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Disable a history query item",
				"summary": "Disable history query item",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{southType}/items/to-csv": {
			"post": {
				"operationId": "ItemsToCsv",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Convert items to CSV for a south type",
				"summary": "Convert items to CSV",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southType",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"delimiter": {
										"type": "string"
									},
									"items": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"delimiter",
									"items"
								]
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}/items/export": {
			"post": {
				"operationId": "ExportItems",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Export history query items to CSV",
				"summary": "Export items to CSV",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HistoryCsvDelimiterRequest"
							}
						}
					}
				}
			}
		},
		"/api/history/{southType}/items/import/check": {
			"post": {
				"operationId": "CheckImportItems",
				"responses": {
					"200": {
						"description": "Import validation results",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HistoryCsvImportResponse"
								}
							}
						}
					}
				},
				"description": "Check CSV import for validity",
				"summary": "Check CSV import",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "southType",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"delimiter": {
										"type": "string"
									},
									"itemsToImport": {
										"type": "string",
										"format": "binary"
									},
									"currentItems": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"delimiter",
									"itemsToImport",
									"currentItems"
								]
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}/items/import": {
			"post": {
				"operationId": "ImportItems",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Import items from CSV",
				"summary": "Import items from CSV",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"items": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"items"
								]
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}/transformers": {
			"post": {
				"operationId": "AddOrEditTransformer",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Add or edit a transformer for a history query",
				"summary": "Add/edit transformer",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TransformerDTOWithOptions"
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}/transformers/{transformerId}": {
			"delete": {
				"operationId": "RemoveTransformer",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Remove a transformer from a history query",
				"summary": "Remove transformer",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "transformerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/history/{historyId}/cache/search": {
			"get": {
				"operationId": "SearchCacheContent",
				"responses": {
					"200": {
						"description": "Array of cache file metadata",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/HistoryCacheMetadata"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Search cache content",
				"summary": "Search cache content",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "nameContains",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "start",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "end",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "folder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				]
			}
		},
		"/api/history/{historyId}/cache/content/{filename}": {
			"get": {
				"operationId": "GetCacheFileContent",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Download a cache file",
				"summary": "Download cache file",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "filename",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "folder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				]
			}
		},
		"/api/history/{historyId}/cache/remove": {
			"post": {
				"operationId": "RemoveCacheContent",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Remove cache files",
				"summary": "Remove cache files",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "folder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}/cache/remove-all": {
			"post": {
				"operationId": "RemoveAllCacheContent",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Remove all cache files",
				"summary": "Remove all cache files",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "folder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				]
			}
		},
		"/api/history/{historyId}/cache/move": {
			"post": {
				"operationId": "MoveCacheContent",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Move cache files",
				"summary": "Move cache files",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "originFolder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					},
					{
						"in": "query",
						"name": "destinationFolder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/api/history/{historyId}/cache/move-all": {
			"post": {
				"operationId": "MoveAllCacheContent",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"description": "Move all cache files",
				"summary": "Move all cache files",
				"tags": [
					"History Queries"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "historyId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "originFolder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					},
					{
						"in": "query",
						"name": "destinationFolder",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"cache",
								"archive",
								"error"
							]
						}
					}
				]
			}
		},
		"/api/engine": {
			"get": {
				"operationId": "GetEngineSettings",
				"responses": {
					"200": {
						"description": "The engine settings",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EngineSettingsDTO"
								}
							}
						}
					}
				},
				"description": "Returns the current configuration settings of the OIBus engine",
				"summary": "Retrieve engine configuration",
				"tags": [
					"Engine"
				],
				"security": [],
				"parameters": []
			},
			"put": {
				"operationId": "UpdateEngineSettings",
				"responses": {
					"204": {
						"description": "Engine settings updated successfully"
					}
				},
				"description": "Updates the configuration settings of the OIBus engine",
				"summary": "Update engine configuration",
				"tags": [
					"Engine"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EngineSettingsCommandDTO"
							}
						}
					}
				}
			}
		},
		"/api/engine/metrics/reset": {
			"post": {
				"operationId": "ResetEngineMetrics",
				"responses": {
					"204": {
						"description": "Engine metrics reset successfully"
					}
				},
				"description": "Resets all metrics collected by the OIBus engine",
				"summary": "Reset metrics",
				"tags": [
					"Engine"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/engine/restart": {
			"post": {
				"operationId": "Restart",
				"responses": {
					"204": {
						"description": "Engine restart initiated successfully"
					}
				},
				"description": "Restarts the OIBus process",
				"summary": "Restart OIBus process",
				"tags": [
					"Engine"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/engine/info": {
			"get": {
				"operationId": "GetInfo",
				"responses": {
					"200": {
						"description": "OIBus information including version, build, and system details",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OIBusInfo"
								}
							}
						}
					}
				},
				"description": "Returns version and system information about the OIBus instance",
				"summary": "Retrieve OIBus information",
				"tags": [
					"Engine"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/engine/status": {
			"get": {
				"operationId": "GetOIBusStatus",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Checks the current status of the OIBus engine",
				"summary": "Check OIBus status",
				"tags": [
					"Engine"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/content": {
			"post": {
				"operationId": "AddContent",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"tags": [
					"Content"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "northId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": false,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"file": {
										"type": "string",
										"format": "binary"
									},
									"timeValues": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/certificates": {
			"get": {
				"operationId": "List",
				"responses": {
					"200": {
						"description": "Array of certificate objects",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CertificateDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of all available certificates",
				"summary": "List all certificates",
				"tags": [
					"Certificates"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Certificate created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CertificateDTO"
								}
							}
						}
					}
				},
				"description": "Creates a new certificate with the provided details",
				"summary": "Create certificate",
				"tags": [
					"Certificates"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CertificateCommandDTO"
							}
						}
					}
				}
			}
		},
		"/api/certificates/{certificateId}": {
			"get": {
				"operationId": "FindById",
				"responses": {
					"200": {
						"description": "The certificate object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CertificateDTO"
								}
							}
						}
					}
				},
				"description": "Retrieves a specific certificate by its unique identifier",
				"summary": "Get certificate by ID",
				"tags": [
					"Certificates"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "certificateId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Update",
				"responses": {
					"204": {
						"description": "Certificate updated successfully"
					}
				},
				"description": "Updates an existing certificate with new details",
				"summary": "Update certificate",
				"tags": [
					"Certificates"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "certificateId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CertificateCommandDTO"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"204": {
						"description": "Certificate deleted successfully"
					}
				},
				"description": "Deletes a certificate by its unique identifier",
				"summary": "Delete certificate",
				"tags": [
					"Certificates"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "certificateId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "http://localhost:2223/"
		}
	],
	"tags": [
		{
			"name": "North Connectors",
			"description": "Endpoints for managing north connectors, subscriptions, and cache operations"
		},
		{
			"name": "South Connectors",
			"description": "Endpoints for managing south connectors, items, and related operations"
		},
		{
			"name": "History Queries",
			"description": "Endpoints for managing history queries, items, and cache operations"
		},
		{
			"name": "Engine",
			"description": "Endpoints for managing the OIBus engine settings, metrics, and status"
		},
		{
			"name": "IP Filters",
			"description": "Endpoints for managing IP filters used to control access to the system"
		},
		{
			"name": "Scan Modes",
			"description": "Endpoints for managing scan modes used to schedule data collection and processing"
		},
		{
			"name": "Certificates",
			"description": "Endpoints for managing SSL/TLS certificates used for secure communication"
		},
		{
			"name": "Logs",
			"description": "Endpoints for searching and retrieving system logs"
		},
		{
			"name": "Users",
			"description": "Endpoints for managing user accounts and authentication"
		},
		{
			"name": "OIAnalytics Registration",
			"description": "Endpoints for managing OIAnalytics service registration and connection settings"
		},
		{
			"name": "OIAnalytics Commands",
			"description": "Endpoints for managing OIAnalytics commands and their execution status"
		},
		{
			"name": "Transformers",
			"description": "Endpoints for managing data transformers used to convert data between different formats"
		}
	]
}