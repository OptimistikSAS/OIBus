// eslint-disable-next-line import/no-extraneous-dependencies
require('dotenv').config({ path: './tests/.env.test' })

const defaultConfig = {
  engine: {
    engineName: 'OIBus',
    port: 2223,
    user: 'admin',
    password: '',
    filter: ['127.0.0.1', '::1', '::ffff:127.0.0.1'],
    safeMode: true,
    logParameters: {
      consoleLog: { level: 'debug' },
      fileLog: {
        level: 'debug',
        maxSize: 1000000,
        numberOfFiles: 5,
        tailable: true,
      },
      sqliteLog: {
        level: 'debug',
        maxNumberOfLogs: 1000000,
      },
      lokiLog: {
        level: 'none',
        lokiAddress: '',
        interval: 60,
        password: '',
        username: '',
        tokenAddress: '',
      },
    },
    scanModes: [
      {
        scanMode: 'everySecond',
        cronTime: '* * * * * *',
      },
      {
        scanMode: 'every10Seconds',
        cronTime: '* * * * * /10',
      },
      {
        scanMode: 'every1Min',
        cronTime: '* * * * *',
      },
      {
        scanMode: 'every10Minutes',
        cronTime: '* * * * /10',
      },
    ],
    proxies: [],
    healthSignal: {
      logging: {
        enabled: true,
        frequency: 3600,
      },
      http: {
        enabled: false,
        host: '',
        endpoint: '/api/optimistik/oibus/info',
        authentication: {
          type: 'Basic',
          key: '',
          secret: '',
        },
        frequency: 300,
      },
    },
  },
  south: [],
  north: [],
}

const testConfig = {
  engine: {
    port: 2223,
    user: 'admin',
    password: '23423423',
    filter: ['127.0.0.1', '::1', '::ffff:127.0.0.1', '*'],
    safeMode: false,
    logParameters: {
      consoleLog: { level: 'debug' },
      fileLog: {
        level: 'error',
        maxSize: 1000000,
        numberOfFiles: 5,
        tailable: true,
      },
      sqliteLog: {
        level: 'error',
        maxSize: 50000000,
      },
      lokiLog: {
        level: 'debug',
        lokiAddress: 'localhost:3100',
        interval: 60,
        password: '',
        username: '',
        tokenAddress: '',
      },
    },
    scanModes: [
      { scanMode: 'everySecond', cronTime: '* * * * * *' },
      { scanMode: 'every10Second', cronTime: '* * * * * /10' },
      { scanMode: 'every1Min', cronTime: '* * * * *' },
      { scanMode: 'listen', cronTime: 'listen' },
    ],
    proxies: [
      {
        name: 'sss',
        protocol: 'http',
        host: 'hhh',
        port: 123,
        username: 'uuu',
        password: 'pppppppppp',
      },
      {
        name: 'ff',
        protocol: 'http',
        host: 'tt',
        port: 1,
        username: 'uii',
        password: 'ppppppppppppp',
      },
      {
        name: 'no-auth',
        protocol: 'http',
        host: 'tt',
        port: 1,
      },
    ],
    engineName: 'OIBus',
    healthSignal: {
      logging: {
        enabled: true,
        frequency: 3600,
      },
      http: {
        enabled: true,
        host: 'https://hostname',
        endpoint: '/api/optimistik/oibus/info',
        authentication: {
          type: 'Basic',
          key: 'username',
          secret: 'password',
        },
        id: 'OIBus-test',
        frequency: 300,
        proxy: '',
      },
    },
    externalSources: ['any'],
  },
  south: [
    {
      id: 'south-uuid-1',
      name: 'TestFolderScanner',
      type: 'FolderScanner',
      enabled: false,
      settings: {
        preserveFiles: true,
        ignoreModifiedDate: false,
        minAge: 0,
        inputFolder: './input/',
        scanMode: 'every5Second',
        regex: '.csv',
        compression: false,
      },
      points: [],
      scanMode: 'every10Second',
    },
  ],
  north: [
    {
      id: 'north-uuid-1',
      name: 'TestConsole',
      type: 'Console',
      enabled: false,
      settings: { verbose: false },
      caching: {
        sendInterval: 10000,
        retryInterval: 5000,
        groupCount: 1,
        maxSendCount: 10000,
        archive: {
          enabled: true,
          retentionDuration: 720,
        },
      },
      subscribedTo: ['south-uuid-1'],
    },
  ],
}

const integrationTestConfig = {
  engine: {
    port: 2223,
    user: 'admin',
    password: '23423423',
    filter: ['127.0.0.1', '::1', '::ffff:127.0.0.1', '*'],
    safeMode: false,
    logParameters: {
      consoleLog: { level: 'debug' },
      fileLog: {
        level: 'error',
        maxSize: 1000000,
        numberOfFiles: 5,
        tailable: true,
      },
      sqliteLog: {
        level: 'error',
        maxSize: 50000000,
      },
      lokiLog: {
        level: 'debug',
        lokiAddress: 'localhost:3100',
        interval: 60,
        password: '',
        username: '',
        tokenAddress: '',
      },
    },
    historyQuery: { folder: './historyQuery' },
    scanModes: [
      { scanMode: 'everySecond', cronTime: '* * * * * *' },
      { scanMode: 'every10Second', cronTime: '* * * * * /10' },
      { scanMode: 'every1Min', cronTime: '* * * * *' },
      { scanMode: 'listen', cronTime: 'listen' },
    ],
    proxies: [],
    engineName: 'OIBus',
    healthSignal: {
      logging: {
        enabled: true,
        frequency: 3600,
      },
      http: {
        enabled: true,
        host: 'https://hostname',
        endpoint: '/api/optimistik/oibus/info',
        authentication: {
          type: 'Basic',
          key: 'username',
          secret: 'password',
        },
        id: 'OIBus-test',
        frequency: 300,
        proxy: '',
      },
    },
    externalSources: ['any'],
  },
  south: [
    {
      id: 'mysql',
      name: 'SQL',
      type: 'SQL',
      enabled: true,
      settings: {
        connectionTimeout: 1000,
        requestTimeout: 1000,
        databasePath: './test.db',
        driver: 'mysql',
        host: process.env.MYSQL_HOSTNAME,
        port: process.env.MYSQL_PORT,
        database: process.env.MYSQL_DATABASE,
        username: process.env.MYSQL_USERNAME,
        password: process.env.MYSQL_PASSWORD,
        query: '',
        delimiter: ',',
        maxReadInterval: 3600,
        readIntervalDelay: 200,
        filename: 'sql-@CurrentDate.csv',
        scanMode: 'everySecond',
        timeColumn: 'timestamp',
        timezone: 'Europe/Paris',
        dateFormat: 'yyyy-MM-dd HH:mm:ss.SSS',
        timeFormat: 'yyyy-MM-dd HH:mm:ss.SSS',
        compression: false,
      },
      scanMode: 'every10Second',
      points: [],
    },
    {
      id: 'postgresql',
      name: 'SQL',
      type: 'SQL',
      enabled: true,
      settings: {
        connectionTimeout: 1000,
        requestTimeout: 1000,
        databasePath: './test.db',
        driver: 'postgresql',
        host: process.env.POSTGRESQL_HOSTNAME,
        port: process.env.POSTGRESQL_PORT,
        database: process.env.POSTGRESQL_DATABASE,
        username: process.env.POSTGRESQL_USERNAME,
        password: process.env.POSTGRESQL_PASSWORD,
        query: '',
        delimiter: ',',
        maxReadInterval: 3600,
        readIntervalDelay: 200,
        filename: 'sql-@CurrentDate.csv',
        scanMode: 'everySecond',
        timeColumn: 'timestamp',
        timezone: 'Europe/Paris',
        dateFormat: 'yyyy-MM-dd HH:mm:ss.SSS',
        timeFormat: 'yyyy-MM-dd HH:mm:ss.SSS',
        compression: false,
      },
      scanMode: 'every10Second',
      points: [],
    },
    {
      id: 'mssql',
      name: 'SQL',
      type: 'SQL',
      enabled: true,
      settings: {
        connectionTimeout: 1000,
        requestTimeout: 1000,
        databasePath: './test.db',
        driver: 'mssql',
        host: process.env.MSSQL_HOSTNAME,
        port: Number(process.env.MSSQL_PORT),
        database: process.env.DB_DATABASE,
        username: process.env.MSSQL_USERNAME,
        password: process.env.MSSQL_PASSWORD,
        query: '',
        encryption: true,
        delimiter: ',',
        maxReadInterval: 3600,
        readIntervalDelay: 200,
        filename: 'sql-@CurrentDate.csv',
        scanMode: 'everySecond',
        timeColumn: 'timestamp',
        timezone: 'Europe/Paris',
        dateFormat: 'yyyy-MM-dd HH:mm:ss.SSS',
        timeFormat: 'yyyy-MM-dd HH:mm:ss.SSS',
        compression: false,
      },
      scanMode: 'every10Second',
      points: [],
    },
  ],
  north: [],
}

const testHistoryConfig = [
  {
    id: 'bulk-id-1',
    name: 'MSSQL South -> OIAnalytics North',
    startTime: '2021-10-15T14:18',
    endTime: '2021-10-16T14:18',
    filePattern: 'history1-@CurrentDate.csv',
    compress: true,
    southId: 'southId-1',
    northId: 'northId-1',
    order: 2,
    settings: {
      query: 'SELECT timestamp,temperature FROM history WHERE timestamp >= @StartTime AND timestamp <= @EndTime',
      points: [
        {
          pointId: 'A13518/AI1/PV.CV',
          scanMode: 'everySecond',
        },
        {
          pointId: '_FC42404/PID1/OUT.CV',
          scanMode: 'everySecond',
        },
        {
          pointId: '_FC42404/PID1/PV.CV',
          scanMode: 'every10Seconds',
        },
      ],
    },
    enabled: true,
    paused: true,
    status: 'exporting',
  },
  {
    id: 'bulk-id-2',
    name: 'MSSQL South -> Console',
    startTime: '2021-10-15T14:18',
    endTime: '2021-10-16T14:18',
    filePattern: 'history1-@CurrentDate.csv',
    compress: true,
    southId: 'southId-2',
    northId: 'northId-2',
    order: 1,
    settings: {
      query: 'SELECT timestamp,temperature FROM history WHERE timestamp >= @StartTime AND timestamp <= @EndTime',
      points: [],
    },
    enabled: true,
    paused: true,
    status: 'pending',
  },
]

export { defaultConfig, testConfig, integrationTestConfig, testHistoryConfig }
