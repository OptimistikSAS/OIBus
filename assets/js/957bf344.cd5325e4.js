"use strict";(self.webpackChunkdoc_oibus=self.webpackChunkdoc_oibus||[]).push([[1919],{9410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var s=n(4848),o=n(8453);const i={displayed_sidebar:"developerSidebar",sidebar_position:3},r="Connector class",c={id:"developer/create-connector/class",title:"Connector class",description:"OIBus connectors must implements specific methods that wll be called by the engine. Some methods are common for South and",source:"@site/docs/developer/create-connector/class.md",sourceDirName:"developer/create-connector",slug:"/developer/create-connector/class",permalink:"/docs/developer/create-connector/class",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{displayed_sidebar:"developerSidebar",sidebar_position:3},sidebar:"developerSidebar",previous:{title:"The manifest",permalink:"/docs/developer/create-connector/manifest"},next:{title:"OIBus with Docker",permalink:"/docs/developer/docker"}},l={},a=[{value:"Common methods",id:"common-methods",level:2},{value:"Start",id:"start",level:3},{value:"Connect (optional)",id:"connect-optional",level:3},{value:"Stop (optional)",id:"stop-optional",level:3},{value:"Disconnect",id:"disconnect",level:3},{value:"Test connection",id:"test-connection",level:3},{value:"North methods",id:"north-methods",level:2},{value:"Handles File",id:"handles-file",level:3},{value:"Handles Values",id:"handles-values",level:3},{value:"South methods",id:"south-methods",level:2},{value:"Queries File",id:"queries-file",level:3},{value:"Queries Last Point",id:"queries-last-point",level:3},{value:"Queries Subscription",id:"queries-subscription",level:3},{value:"Queries History",id:"queries-history",level:3}];function d(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"connector-class",children:"Connector class"}),"\n",(0,s.jsx)(t.p,{children:"OIBus connectors must implements specific methods that wll be called by the engine. Some methods are common for South and\nNorth connectors, some are specific, depending on the connector capabilities"}),"\n",(0,s.jsx)(t.h2,{id:"common-methods",children:"Common methods"}),"\n",(0,s.jsx)(t.h3,{id:"start",children:"Start"}),"\n",(0,s.jsx)(t.p,{children:"Method called at connector startup. When overriding this method, call the parent method at the end.\nYou can use this method to create temp folders, locale cache database, etc..."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="Start method example"',children:"override async start(): Promise<void> {\n  await createFolder(this.tmpFolder); // imported from '../../service/utils'\n  await super.start();\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"super.start()"})," line calls the connect method. If ",(0,s.jsx)(t.code,{children:"start"})," is not implemented, only the parent method will be called."]}),"\n",(0,s.jsx)(t.h3,{id:"connect-optional",children:"Connect (optional)"}),"\n",(0,s.jsx)(t.p,{children:"This method connect, if necessary, the connector to its target. When overriding this method, call the parent method\nonce the connection is established."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="MQTT connect example"',children:"override async connect(): Promise<void> {\n  this.logger.info(`Connecting to \"${this.connector.settings.url}\"`);\n  const options = await this.createConnectionOptions();\n\n  this.client = mqtt.connect(this.connector.settings.url, options);\n  this.client.on('connect', async () => {\n    this.logger.info(`Connected to ${this.connector.settings.url}`);\n    await super.connect();\n  });\n  this.client.on('error', error => {\n    this.logger.error(`MQTT connection error ${error}`);\n  });\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"If not implemented, only the parent method will be called."}),"\n",(0,s.jsx)(t.h3,{id:"stop-optional",children:"Stop (optional)"}),"\n",(0,s.jsx)(t.p,{children:"When changing configuration, or restarting OIBus, the connector must be stopped. This method allows you to clean cache at\nconnector stop.\nIf not implemented, only the parent method will be called. The parent method call the disconnect method."}),"\n",(0,s.jsx)(t.h3,{id:"disconnect",children:"Disconnect"}),"\n",(0,s.jsxs)(t.p,{children:["This method closes all active connection. You must implement it if you use a ",(0,s.jsx)(t.code,{children:"connect"})," method."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="MQTT disconnect example"',children:"  override async disconnect(): Promise<void> {\n    if (this.client) {\n      this.client.end(true);\n      this.logger.info(`Disconnected from ${this.connector.settings.url}...`);\n    }\n    await super.disconnect();\n  }\n"})}),"\n",(0,s.jsx)(t.h3,{id:"test-connection",children:"Test connection"}),"\n",(0,s.jsxs)(t.p,{children:["Implement this method to test connection settings from the frontend form. The settings will be passed in the connector\nconstructor. You then have access to all the object context with ",(0,s.jsx)(t.code,{children:"this"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="Test connection example"',children:"override async testConnection(): Promise<void> {\n    // Your tests here\n}\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"caution",children:(0,s.jsx)(t.p,{children:"Be sure to close your connection at the end of the test."})}),"\n",(0,s.jsx)(t.h2,{id:"north-methods",children:"North methods"}),"\n",(0,s.jsxs)(t.p,{children:["North connectors can implement two interfaces: ",(0,s.jsx)(t.code,{children:"HandlesFile"})," and ",(0,s.jsx)(t.code,{children:"HandlesValues"})]}),"\n",(0,s.jsx)(t.h3,{id:"handles-file",children:"Handles File"}),"\n",(0,s.jsxs)(t.p,{children:["Files are retrieved from its ",(0,s.jsx)(t.code,{children:"files"})," cache folder and its path are pass as method argument."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="handleFile method"',children:"async handleFile(filePath: string): Promise<void> {\n    // manage file here\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"handles-values",children:"Handles Values"}),"\n",(0,s.jsxs)(t.p,{children:["Values are retrieved from its ",(0,s.jsx)(t.code,{children:"values"})," cache folder and the method receives them as an array."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="handleValues method"',children:"async handleValues(values: Array<any>): Promise<void> {\n    // manage values here\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"south-methods",children:"South methods"}),"\n",(0,s.jsxs)(t.p,{children:["South connectors can implement four interfaces: ",(0,s.jsx)(t.code,{children:"QueriesFile"}),",",(0,s.jsx)(t.code,{children:"QueriesLastPoint"}),", ",(0,s.jsx)(t.code,{children:"QueriesSubscription"}),", ",(0,s.jsx)(t.code,{children:"QueriesHistory"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Each South connector has access to the method ",(0,s.jsx)(t.code,{children:"addFile"})," and ",(0,s.jsx)(t.code,{children:"addValue"}),". With these two methods, you can send file and values\nto the OIBus engine, that will send it to North caches."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="addValues usage"',children:"await this.addValues(values); // values variable is an array of JSON\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="addFile usage"',children:"await this.addFile(filePath); // filePath variable is the full path of a file\n"})}),"\n",(0,s.jsx)(t.p,{children:"These methods can be called from the methods which implement to following interfaces. All these methods receive an array\nof SouthConnectorItemDTO that will be used in the method to query their associated data."}),"\n",(0,s.jsx)(t.h3,{id:"queries-file",children:"Queries File"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="fileQuery prototype"',children:"fileQuery(items: Array<SouthConnectorItemDTO>): Promise<void>;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"queries-last-point",children:"Queries Last Point"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="lastPointQuery prototype"',children:"lastPointQuery(items: Array<SouthConnectorItemDTO>): Promise<void>;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"queries-subscription",children:"Queries Subscription"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="subscribe and unsubscribe prototype"',children:"subscribe(items: Array<SouthConnectorItemDTO>): Promise<void>;\nunsubscribe(items: Array<SouthConnectorItemDTO>): Promise<void>;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"queries-history",children:"Queries History"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="historyQuery prototype"',children:"historyQuery(items: Array<SouthConnectorItemDTO>, startTime: Instant, endTime: Instant): Promise<Instant>;\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(6540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);