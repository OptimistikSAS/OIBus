"use strict";(self.webpackChunkdoc_oibus=self.webpackChunkdoc_oibus||[]).push([[5954],{8936:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=o(4848),t=o(8453);const i={sidebar_position:6},r="Console",c={id:"guide/north-connectors/console",title:"Console",description:"The console is primarily employed for development and troubleshooting purposes.",source:"@site/docs/guide/north-connectors/console.md",sourceDirName:"guide/north-connectors",slug:"/guide/north-connectors/console",permalink:"/docs/guide/north-connectors/console",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"guideSidebar",previous:{title:"Azure Blob",permalink:"/docs/guide/north-connectors/azure-blob"},next:{title:"South connectors",permalink:"/docs/category/south-connectors"}},l={},d=[{value:"Specific settings",id:"specific-settings",level:2},{value:"Display Console in production",id:"display-console-in-production",level:2}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"console",children:"Console"})}),"\n",(0,s.jsx)(n.p,{children:"The console is primarily employed for development and troubleshooting purposes."}),"\n",(0,s.jsx)(n.h2,{id:"specific-settings",children:"Specific settings"}),"\n",(0,s.jsxs)(n.p,{children:["The console accepts just one option: ",(0,s.jsx)(n.code,{children:"verbose"}),". When verbose mode is enabled, the received data is presented in detailed\ntables within the console. In contrast, with verbose mode disabled, only the count of values received by the North\nconnector is displayed."]}),"\n",(0,s.jsx)(n.h2,{id:"display-console-in-production",children:"Display Console in production"}),"\n",(0,s.jsx)(n.p,{children:"In a production environment, particularly on Windows or Linux, you might have OIBus running as a service. If you need\nto access the console output in such a scenario, you can follow these steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Stop the OIBus service."}),"\n",(0,s.jsxs)(n.li,{children:["Launch OIBus from a terminal with administrative access, directly from its installation folder:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["On Windows: Execute the ",(0,s.jsx)(n.code,{children:"go.bat"})," script."]}),"\n",(0,s.jsxs)(n.li,{children:["On Linux: Run the ",(0,s.jsx)(n.code,{children:"go.sh"})," script."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Restart the service",type:"caution",children:(0,s.jsx)(n.p,{children:"When you exit the terminal and wish to run OIBus as a service once more, remember to restart the service using the OS\nservice manager."})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var s=o(6540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);