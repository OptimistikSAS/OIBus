"use strict";(self.webpackChunkdoc_oibus=self.webpackChunkdoc_oibus||[]).push([[4265],{7194:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var s=t(4848),i=t(8453);const a={sidebar_position:3},r="Data rate estimation and cache sizing",l={id:"guide/advanced/oibus-data-rate",title:"Data rate estimation and cache sizing",description:"OIBus sends values to a target application via North connectors (OIConnect, OIAnalytics...). There are two sending",source:"@site/versioned_docs/version-v2/guide/advanced/oibus-data-rate.md",sourceDirName:"guide/advanced",slug:"/guide/advanced/oibus-data-rate",permalink:"/zh/docs/v2/guide/advanced/oibus-data-rate",draft:!1,unlisted:!1,tags:[],version:"v2",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guideSidebar",previous:{title:"OIBus to OIBus communication",permalink:"/zh/docs/v2/guide/advanced/oibus-to-oibus"},next:{title:"OPCHDA COM/DCOM setup",permalink:"/zh/docs/v2/guide/advanced/opchda-dcom"}},o={},d=[{value:"Sending files (CSV)",id:"sending-files-csv",level:2},{value:"Column files",id:"column-files",level:3},{value:"Row files",id:"row-files",level:3},{value:"Column row files",id:"column-row-files",level:3},{value:"Sending values (JSON payload)",id:"sending-values-json-payload",level:2},{value:"Comparison",id:"comparison",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"data-rate-estimation-and-cache-sizing",children:"Data rate estimation and cache sizing"}),"\n",(0,s.jsx)(n.p,{children:"OIBus sends values to a target application via North connectors (OIConnect, OIAnalytics...). There are two sending\nmodes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"through a file with a files' endpoint"}),"\n",(0,s.jsx)(n.li,{children:"through JSON payloads with a values' endpoint."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The volumes to be taken into account can be estimated according to the data to be sent and the sending mode selected.\nThese estimates can also be used to size the amount of cache storage needed to ensure the store and forward under\ngood conditions."}),"\n",(0,s.jsx)(n.p,{children:"This section gives some hints on how to estimate the cache size."}),"\n",(0,s.jsx)(n.h2,{id:"sending-files-csv",children:"Sending files (CSV)"}),"\n",(0,s.jsx)(n.p,{children:"We will focus on data in the form of CSV files. In this case the volume will depend on several parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The data sampling frequency"}),"\n",(0,s.jsx)(n.li,{children:"The file sending frequency"}),"\n",(0,s.jsx)(n.li,{children:"The timestamp format"}),"\n",(0,s.jsx)(n.li,{children:"The data format: number of characters used (precision)"}),"\n",(0,s.jsx)(n.li,{children:"The size of data references"}),"\n",(0,s.jsx)(n.li,{children:"The file format: in lines or in columns"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In the following examples, we will calculate how much space a CSV file generated by OIBus takes.\nWe took the following assumptions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The sampling frequency: one point per minute."}),"\n",(0,s.jsx)(n.li,{children:"The frequency of sending the file: one file every 30 minutes."}),"\n",(0,s.jsx)(n.li,{children:"The timestamp format: ISO 8601 format, 24 bytes in size."}),"\n",(0,s.jsx)(n.li,{children:"Data format: 3 digits with a separator for the decimal places. Therefore, the data in the following examples have a\nsize of 4 bytes."}),"\n",(0,s.jsx)(n.li,{children:"The size of the point ID (data reference): DataXXX, where XXX represents three numbers characters. Therefore, the\nreferences of the following examples have a size of 7 bytes."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"column-files",children:"Column files"}),"\n",(0,s.jsxs)(n.p,{children:["This format is particularly suitable for data repeated on the same timestamp. It saves space compared to a ",(0,s.jsx)(n.em,{children:"lines"}),"\nformat."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csv",children:"Timestamp\t                Data001\t    Data002\t    Data003\n2020-02-01T20:04:00.000Z\t12.0\t    10.0\t    10.0\n2020-02-01T20:05:00.000Z\t10.0\t    19.0\t    10.0\n2020-02-01T20:06:00.000Z\t10.0\t    10.0\t    14.0\n...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The size of the header is ",(0,s.jsx)(n.code,{children:"10 + 1 + 7 + 1 + 7 + 1 + 7 + 1 = 35 bytes"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The size of one line is ",(0,s.jsx)(n.code,{children:"24 + 1 + 4 + 1 + 4 + 1 + 4 + 1 = 40 bytes"})," (column separators and newlines are taken into\naccount)."]}),"\n",(0,s.jsxs)(n.p,{children:["The number of lines depends on the frequency of the data, here one line every minute. With a file sent every 30 minutes,\nit will therefore have a size of ",(0,s.jsx)(n.code,{children:"35+40x30 = 1235 bytes"}),". Over a day, there will be 48 files, a total of 59,280 bytes\nor 58 kB."]}),"\n",(0,s.jsx)(n.h3,{id:"row-files",children:"Row files"}),"\n",(0,s.jsx)(n.p,{children:"This format is particularly suitable when the different data transmitted do not have the same sampling frequency. In\nthe example we assume that all data has the same sample rate."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csv",children:"Timestamp\t                Reference\t    Value\n2020-02-01T20:04:00.000Z\tData001\t        12.0\n2020-02-01T20:04:00.000Z\tData002\t        10.0\n2020-02-01T20:04:00.000Z\tData003\t        10.0\n2020-02-01T20:05:00.000Z\tData001\t        10.0\n2020-02-01T20:05:00.000Z\tData002\t        19.0\n2020-02-01T20:05:00.000Z\tData003\t        10.0\n2020-02-01T20:06:00.000Z\tData001\t        10.0\n2020-02-01T20:06:00.000Z\tData002\t        10.0\n2020-02-01T20:06:00.000Z\tData003\t        14.0\n...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The size of the header is ",(0,s.jsx)(n.code,{children:"10 + 1 + 9 + 1 + 6 + 1 = 28 octets"}),".\nThe size of a line is ",(0,s.jsx)(n.code,{children:"24 + 1 + 7 + 1 + 4 + 1 = 38 bytes"})," (column separators and newlines are taken into account)."]}),"\n",(0,s.jsxs)(n.p,{children:["The number of lines depends on the frequency of the data and the number of references, here one line every minute\nmultiplied by 3 references (which makes 3 lines per minute). With one file sent every 30 minutes, it will therefore have\na size of ",(0,s.jsx)(n.code,{children:"28+38x30x3 = 3448 bytes"}),". Over a day, there will be 48 files, a total of 165,504 bytes or 162 kB."]}),"\n",(0,s.jsx)(n.h3,{id:"column-row-files",children:"Column row files"}),"\n",(0,s.jsx)(n.p,{children:"This format has the advantage of the column file and allows the pooling of data identifiers (001, 002, 003) with the\nreferences if there are several, which is not the case here since only Data is used. This allows you to obtain the\nreferences Data001, Data002, Data003."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csv",children:"Timestamp\t                Reference\t001\t    002\t    003\n2020-02-01T20:04:00.000Z\tData\t    12,0\t10,0\t10,0\n2020-02-01T20:05:00.000Z\tData\t    10.0\t19.0\t10.0\n2020-02-01T20:06:00.000Z\tData\t    10.0\t10.0\t14.0\n...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The size of the header is ",(0,s.jsx)(n.code,{children:"10 + 1 + 9 + 1 + 3 + 1 + 3 + 1 + 3 + 1 = 33 bytes"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The size of a line here is ",(0,s.jsx)(n.code,{children:"24 + 1 + 4 + 1 + 4 + 1 + 4 + 1 + 4 + 1 = 45 bytes"})," (column separators and newlines are taken\ninto account)."]}),"\n",(0,s.jsxs)(n.p,{children:["The number of lines depends on the frequency of the data and the number of references, here a line every minute\nmultiplied by a reference (which makes one line per minute). With one file sent every 30 minutes, the file to be sent\nwill therefore have a size of ",(0,s.jsx)(n.code,{children:"33+45x30 = 1383 bytes"}),". Over a day, there will be 48 files, a total of 66,384 bytes or\n65 kB."]}),"\n",(0,s.jsx)(n.h2,{id:"sending-values-json-payload",children:"Sending values (JSON payload)"}),"\n",(0,s.jsx)(n.p,{children:"When values are retrieved by the North connector and sent to a values' endpoint (OIConnect or OIAnalytics), they are\nformatted in an array like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n    {"timestamp": "2020-02-01T20:04:00.000Z", "pointId":"Data001", "data": {"value": "12.0", "quality": "192"}},\n    {"timestamp": "2020-02-01T20:04:00.000Z", "pointId":"Data002", "data": {"value": "10.0", "quality": "192"}}, \n    {"timestamp": "2020-02-01T20:04:00.000Z", "pointId":"Data003", "data": {"value": "10.0", "quality": "192"}}\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Each field has the following meaning:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"timestamp"}),": indicates the timestamp of the value in ISO 8601 format"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"pointId"}),": reference of the value"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"data"}),": JSON object containing the recorded value (value) and the quality (quality)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We will focus on data in JSON file format. In this case the size depends on several parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The data sampling frequency"}),"\n",(0,s.jsxs)(n.li,{children:["The number of points grouped by sending (defined by ",(0,s.jsx)(n.a,{href:"/zh/docs/v2/guide/north-connectors/common-settings#caching",children:(0,s.jsx)(n.em,{children:"Group Count"})}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["The sending frequency (defined by ",(0,s.jsx)(n.a,{href:"/zh/docs/v2/guide/north-connectors/common-settings#caching",children:(0,s.jsx)(n.em,{children:"Send Interval"})}),")"]}),"\n",(0,s.jsx)(n.li,{children:"The format of data and quality: number of characters used (precision)"}),"\n",(0,s.jsx)(n.li,{children:"The size of the data references"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"It is then possible to estimate the space occupied by a value."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The timestamp size is 39 bytes (",(0,s.jsx)(n.code,{children:'"timestamp": "2020-02-01T20: 00: 00.000Z"'}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["The pointId size is of the form of ",(0,s.jsx)(n.code,{children:'"pointId": "DataXXX"'}),", i.e. 13 bytes added to the number of bytes of the\nreference (here the 7 bytes of ",(0,s.jsx)(n.em,{children:"DataXXX"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["The data field size is 10 bytes (",(0,s.jsx)(n.code,{children:'"data": {...}'}),") added to its content:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The value field is of the form of ",(0,s.jsx)(n.code,{children:'"value": "10.0"'}),", i.e. 11 bytes added the variable number of bytes on\nwhich is encoded the value (here 4 bytes)"]}),"\n",(0,s.jsxs)(n.li,{children:["The quality field is of the form of ",(0,s.jsx)(n.code,{children:'"quality": "192"'}),", i.e. 13 bytes plus the variable number of bytes on which\nthe quality is encoded (here 3 bytes)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Hence, the size of the object representing a value can be broken down into:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The constant object size: ",(0,s.jsx)(n.code,{children:"39 + 13 + 10 + 11 + 13 + 6 = 92 bytes"})," (6 corresponding to the separators of the different\nelements: commas...)"]}),"\n",(0,s.jsx)(n.li,{children:"The size of the reference: 7 bytes"}),"\n",(0,s.jsx)(n.li,{children:"The size of the value: 4 bytes"}),"\n",(0,s.jsx)(n.li,{children:"The size of the quality: 3 bytes"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The size of a single object to sent is therefore 106 bytes, for a single value."}),"\n",(0,s.jsx)(n.p,{children:"With a sampling frequency of 1 point per minute and 3 data, with Group Count equal to 1000 and Send Interval equal to\n1000ms, then OIBus will transmit a JSON every minute with 3 data or 318 bytes."}),"\n",(0,s.jsx)(n.p,{children:"Over one day, this will represent 318 x 24 x 60 = 457,920 bytes, or 447 kB."}),"\n",(0,s.jsx)(n.h2,{id:"comparison",children:"Comparison"}),"\n",(0,s.jsx)(n.p,{children:"Under the conditions defined in the example, it appears that the transmission mode and the data format have a\nsignificant impact on the transmitted volumes. This will be even more critical when the number of data and\ntheir sampling frequency are higher than described in this example."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"CSV columns"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"CSV rows"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"CSV rows + columns"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"JSON payload"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Sent by day"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"58 kB"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"162 kB"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"65 kB"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"447 kB"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Size by value"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"13,7 bytes"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"38,3 bytes"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"15,4 bytes"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"106 bytes"})]})]})]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);