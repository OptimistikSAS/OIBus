name: Release next OIBus version

on:
  workflow_call:
    inputs:
      branch:
        type: string
        description: 'The branch to checkout from'
        required: true
      pkg:
        required: true
        type: string
        description: 'The pkg version to use'
      node-version:
        type: string
        description: "The node version to package with"
        required: false

jobs:
  build-binaries:
    name: Build for ${{ matrix.config['friendlyName'] }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
#          - { friendlyName: 'Linux arm64', distribution: 'linux', arch: 'aarch64', archiveName: 'oibus-linux_arm64.zip', zip: 'zip -r' }
          - { friendlyName: 'MacOS arm64', distribution: 'macos', arch: 'aarch64', archiveName: 'oibus-macos_arm64.zip', zip: 'zip -r' }
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Set internal outputs
        shell: bash
        id: build-arm-internal
        run: |
          if [ "${{ matrix.config['arch'] }}" == "aarch64" ]; then
            echo "target-arch=arm64" >> $GITHUB_OUTPUT
          else
            echo "target-arch=${{ inputs.arch }}" >> $GITHUB_OUTPUT
          fi   
          echo "platform=${{ matrix.config['distribution'] }}" >> $GITHUB_OUTPUT

      - name: Setup backend environment
        uses: ./.github/actions/setup_backend_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}

      - name: Setup frontend environment
        uses: ./.github/actions/setup_frontend_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}

      - name: Bundle OIBus frontend for ${{ matrix.config['friendlyName'] }}
        working-directory: ./frontend
        run: npm run build

      - name: Pre build OIBus library for ${{ matrix.config['friendlyName'] }}
        working-directory: ./backend
        run: |
          npm run internal:build:lib-${{ steps.build-arm-internal.outputs.platform }}
          npm run build

      - uses: uraimo/run-on-arch-action@v2
        name: Build OIBus for ${{ matrix.config['friendlyName'] }}
        id: build
        with:
          arch: ${{ matrix.config['arch'] }}
          distro: ubuntu18.04
          shell: /bin/sh
          install: |
            apt update && apt -y install curl
            curl -fsSL https://deb.nodesource.com/setup_14.x | bash -
            apt install -y nodejs
            npm i -g pkg@${{ inputs.pkg }}
            pkg --version
          run: |
            pkg \
            --config ./backend/package.json \
            --target=${{ inputs.node-version }}-${{ steps.build-arm-internal.outputs.platform }}-${{ steps.build-arm-internal.outputs.target-arch }} \
            --output ./build/bin/${{ steps.build-arm-internal.outputs.platform }}-${{ steps.build-arm-internal.outputs.target-arch }}/oibus \
            --public --compress GZip \
            ./backend/dist/backend/src/index.js
            stat ./build/bin/${{ steps.build-arm-internal.outputs.platform }}-${{ steps.build-arm-internal.outputs.target-arch }}/oibus

      - name: Add OIBus deps for ${{ matrix.config['friendlyName'] }}
        if: ${{ matrix.config['distribution'] == 'linux' }}
        run: |
          sudo cp -r ./build/deps/${{ steps.build-arm-internal.outputs.platform }}-${{ steps.build-arm-internal.outputs.target-arch }}/* ./build/bin/${{ steps.build-arm-internal.outputs.platform }}-${{ steps.build-arm-internal.outputs.target-arch }}

      - name: Package OIBus for ${{ matrix.config['friendlyName'] }}
        run: |
          cd build/bin/${{ steps.build-arm-internal.outputs.platform }}-${{ steps.build-arm-internal.outputs.target-arch }} 
          sudo ${{ matrix.config['zip'] }} ../${{ matrix.config['archiveName'] }} .

      - name: Upload artifact ${{ matrix.config['archiveName'] }}
        uses: actions/upload-artifact@v3
        with:
          path: ./build/bin/${{ matrix.config['archiveName'] }}

  sign-macos-binary:
    needs: build-binaries
    name: 'Sign MacOS OIBus binary'
    runs-on: macos-latest
    steps:
      - name: Download OIBus artifacts
        id: download
        uses: actions/download-artifact@v3

      - name: Install ldid tool for signing
        run: brew install ldid

      - name: Sign MacOS arm64 binary
        run: |
          ls -R
          sudo unzip ./artifact/oibus-macos_arm64.zip -d ./oibus-macos_arm64
          cd oibus-macos_arm64
          sudo ldid -S oibus
          sudo zip -r ../oibus-macos_arm64.zip .

      - name: Upload artifact oibus-macos_arm64.zip
        uses: actions/upload-artifact@v3
        with:
          path: ./oibus-macos_arm64.zip