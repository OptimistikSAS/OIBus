name: Release next OIBus version

on:
  workflow_dispatch:

jobs:
  tests:
    name: 'Test OIBus'
    uses: ./.github/workflows/tests.yml

  standard-version:
    name: 'Bump OIBus version'
    needs: tests
    runs-on: ubuntu-latest
    outputs:
      version-tag: ${{ steps.standard-version.outputs.version-tag }}
      prerelease: ${{ steps.standard-version.outputs.prerelease }}
      branch-release: ${{ steps.standard-version.outputs.branch-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}

      - name: Bump version
        id: standard-version
        run: |
          git config --global user.name 'optimistik-actions'
          git config --global user.email 'optimistiksas@users.noreply.github.com'
          git fetch
          VERSION_ARGS=""
          PRERELEASE=false
          BRANCH=$(git branch --show-current| tr '\\/' - | tr -dc '[:alnum:]-+.\n\r' ) # first tr replace / and \ to -, second tr removes all non alphanums except .+-\n\r)
          BRANCH_RELEASE=${BRANCH}
          if [ "$BRANCH" != release ]; then
            PRERELEASE=true
            VERSION_ARGS="--prerelease $(echo ${BRANCH} | tr '\\/' - | tr -dc '[:alnum:]-+.\n\r' )" # first tr replace / and \ to -, second tr removes all non alphanums except .+-\n\r
            BRANCH_RELEASE="${BRANCH}-release"
            git checkout "${BRANCH_RELEASE}" || git checkout -b "${BRANCH_RELEASE}" "${BRANCH}"
            git merge origin/${BRANCH} --strategy-option=theirs -m "Merge ${BRANCH} in ${BRANCH_RELEASE}" || {
              git diff --name-only --diff-filter=U | xargs git rm  # remove deleted files in conflict https://stackoverflow.com/a/46177025/2355219
              git commit -m "Merge ${BRANCH} in ${BRANCH_RELEASE} with conflicts resolved"
            }
          fi
          npx standard-version -i ./CHANGELOG.md $VERSION_ARGS
          git status
          git push --follow-tags origin HEAD
          echo "version-tag=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE"  >> $GITHUB_OUTPUT
          echo "branch-release=$BRANCH_RELEASE"  >> $GITHUB_OUTPUT

      - name: Upload artifact CHANGELOG.md
        uses: actions/upload-artifact@v3
        with:
          path: ./CHANGELOG.md

  build-binaries:
    needs: standard-version
    name: Build for ${{ matrix.config['friendlyName'] }}
    runs-on: ${{ matrix.config['os'] }}
    strategy:
      matrix:
        config:
          - { friendlyName: 'Mac OS x64', os: 'macos-latest',   platform: 'macos', archiveName: 'oibus-macos.zip', zip: 'zip -r' }
          - { friendlyName: 'Windows x64', os: 'windows-latest', platform: 'win',   archiveName: 'oibus-win32x64.zip', zip: '7z a -tzip' }
          - { friendlyName: 'Linux x64', os: 'ubuntu-latest',  platform: 'linux', archiveName: 'oibus-linux.tar.gz', zip: 'tar -czvf' }
          - { friendlyName: 'Linux ARM64', os: 'ubuntu-latest',  platform: 'linux-arm64', archiveName: 'oibus-linux-arm64.tar.gz', zip: 'tar -czvf' }
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.standard-version.outputs.branch-release }}

      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}

      - name: Build OIBus for ${{ matrix.config['friendlyName'] }}
        if: ${{ matrix.config['platform'] != 'linux-arm64' }}
        run: npm run build:${{ matrix.config['platform'] }}

      - name: Pre build OIBus library for ${{ matrix.config['friendlyName'] }}
        if: ${{ matrix.config['platform'] == 'linux-arm64' }}
        run: |
          npm run internal:build:web-client 
          npm run internal:build:backend -- --removeComments
          npm run internal:build:lib-linux-arm64

      - name: Build OIBus for ${{ matrix.config['friendlyName'] }}
        if: ${{ matrix.config['platform'] == 'linux-arm64' }}
        id: pkg-action
        uses: lando/pkg-action@v2
        with:
          entrypoint: ./build/backend/src/index.js
          arch: 'arm64'
          os: linux
          config: package.json
          options: --public --compress GZip
          node-version: node16

      - name: Post build OIBus library for ${{ matrix.config['friendlyName'] }}
        if: ${{ matrix.config['platform'] == 'linux-arm64' }}
        run: |
          mkdir -p build/bin/${{ matrix.config['platform'] }}
          cp ${{ steps.pkg-action.outputs.file }} build/bin/linux-arm64/oibus
          cp build/deps/linux/* ./build/bin/linux-arm64/
          cp src/config/default-config.json ./build/bin/linux-arm64/default-config.json

      - name: Test OIBus run for ${{ matrix.config['friendlyName'] }}
        if: ${{ matrix.config['platform'] != 'macos-arm64' && matrix.config['platform'] != 'linux-arm64' }}
        run: |
          cd build/bin/${{ matrix.config['platform'] }}
          ./oibus --config ../../../data-folder --check true

      - name: Package OIBus for ${{ matrix.config['friendlyName'] }}
        run: |
          cd build/bin/${{ matrix.config['platform'] }}
          ${{ matrix.config['zip'] }} ../${{ matrix.config['archiveName'] }} .

      - name: Upload artifact ${{ matrix.config['archiveName'] }}
        uses: actions/upload-artifact@v3
        with:
          path: ./build/bin/${{ matrix.config['archiveName'] }}

      - name: Package Windows installer
        env:
          PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
          PFX_BASE64_CONTENT: ${{ secrets.PFX_BASE64_CONTENT }}
          PFX_PATH: C://oibus.pfx
        if: ${{ matrix.config['platform'] == 'win' }}
        shell: pwsh
        working-directory: ./build/bin/win
        run: |
          $encodedBytes = [System.Convert]::FromBase64String("$env:PFX_BASE64_CONTENT")
          Set-Content -Path "$env:PFX_PATH" -AsByteStream -Value $encodedBytes
          npm run build:win-setup
          Remove-Item -Path "$env:PFX_PATH";

      - name: Rename windows installer
        if: ${{ matrix.config['platform'] == 'win' }}
        run: mv ./build/bin/win-setup-release/oibus-setup.exe ./build/bin/win-setup-release/oibus-setup-win32x64.exe

      - name: Upload Windows installer
        if: ${{ matrix.config['platform'] == 'win' }}
        uses: actions/upload-artifact@v3
        with:
          path: ./build/bin/win-setup-release/oibus-setup-win32x64.exe

  publish-binaries:
    needs: [build-binaries, standard-version]
    name: 'Publish OIBus binaries'
    runs-on: ubuntu-latest
    steps:
      - name: Download OIBus artifacts
        id: download
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.standard-version.outputs.version-tag }}
          name: ${{ needs.standard-version.outputs.version-tag }}
          body_path: ./artifact/CHANGELOG.md
          prerelease: ${{ needs.standard-version.outputs.prerelease }}
          files: |
            ./artifact/oibus-setup-win32x64.exe
            ./artifact/oibus-linux.tar.gz
            ./artifact/oibus-linux-arm64.tar.gz
            ./artifact/oibus-macos.zip
            ./artifact/oibus-macos-arm64.zip
            ./artifact/oibus-win32x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }} # Need REPO_ACCESS_TOKEN to propagate 'release published' event

