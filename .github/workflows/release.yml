name: Release next OIBus version

on:
  workflow_dispatch:

jobs:
  tests:
    name: 'Test OIBus'
    uses: ./.github/workflows/tests.yml

  standard-version:
    name: 'Bump OIBus version'
    needs: tests
    runs-on: ubuntu-latest
    outputs:
      version-tag: ${{ steps.standard-version.outputs.version-tag }}
      prerelease: ${{ steps.standard-version.outputs.prerelease }}
      branch-release: ${{ steps.standard-version.outputs.branch-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.15

      - name: Setup backend environment
        uses: ./.github/actions/setup_backend_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}

      - name: Bump version
        id: standard-version
        working-directory: ./backend
        run: |
          git config --global user.name 'optimistik-actions'
          git config --global user.email 'optimistiksas@users.noreply.github.com'
          git fetch
          VERSION_ARGS=""
          PRERELEASE=false
          BRANCH=$(git branch --show-current| tr '\\/' - | tr -dc '[:alnum:]-+.\n\r' ) # first tr replace / and \ to -, second tr removes all non alphanums except .+-\n\r)
          BRANCH_RELEASE=${BRANCH}
          if [ "$BRANCH" != release ]; then
            PRERELEASE=true
            VERSION_ARGS="--prerelease $(echo ${BRANCH} | tr '\\/' - | tr -dc '[:alnum:]-+.\n\r' )" # first tr replace / and \ to -, second tr removes all non alphanums except .+-\n\r
            BRANCH_RELEASE="${BRANCH}-release"
            git checkout "${BRANCH_RELEASE}" || git checkout -b "${BRANCH_RELEASE}" "${BRANCH}"
            git merge origin/${BRANCH} --strategy-option=theirs -m "Merge ${BRANCH} in ${BRANCH_RELEASE}" || {
              git diff --name-only --diff-filter=U | xargs git rm  # remove deleted files in conflict https://stackoverflow.com/a/46177025/2355219
              git commit -m "Merge ${BRANCH} in ${BRANCH_RELEASE} with conflicts resolved"
            }
          fi
          npx standard-version -i ../CHANGELOG.md $VERSION_ARGS
          git status
          git push --follow-tags origin HEAD
          echo "version-tag=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE"  >> $GITHUB_OUTPUT
          echo "branch-release=$BRANCH_RELEASE"  >> $GITHUB_OUTPUT

      - name: Upload artifact CHANGELOG.md
        uses: actions/upload-artifact@v3
        with:
          path: CHANGELOG.md

  build-x64:
    needs: standard-version
    name: 'Build x64 binaries'
    uses: ./.github/workflows/build_x64.yml
    secrets:
      PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
      PFX_BASE64_CONTENT: ${{ secrets.PFX_BASE64_CONTENT }}
    with:
      branch: ${{ needs.standard-version.outputs.branch-release }}

#  build-arm64:
#    needs: standard-version
#    name: 'Build arm64 binaries'
#    uses: ./.github/workflows/build_arm64.yml
#    with:
#      branch: ${{ needs.standard-version.outputs.branch-release }}
#      node-version: node18
#      pkg: 5.8.1

  publish-binaries:
    needs: [build-x64, standard-version]
    name: 'Publish OIBus binaries'
    runs-on: ubuntu-latest
    steps:
      - name: Download OIBus artifacts
        id: download
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.standard-version.outputs.version-tag }}
          name: ${{ needs.standard-version.outputs.version-tag }}
          body_path: ./artifact/CHANGELOG.md
          prerelease: ${{ needs.standard-version.outputs.prerelease }}
          files: |
            ./artifact/oibus-win_x64.zip
            ./artifact/oibus-setup-win_x64.exe
            ./artifact/oibus-linux_x64.zip
#            ./artifact/oibus-linux_arm64.zip
            ./artifact/oibus-macos_x64.zip
#            ./artifact/oibus-macos_arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }} # Need REPO_ACCESS_TOKEN to propagate 'release published' event

